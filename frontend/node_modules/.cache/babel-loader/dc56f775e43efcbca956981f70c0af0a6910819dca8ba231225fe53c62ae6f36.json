{"ast":null,"code":"var _jsxFileName = \"/home/alexey/Documents/source/java/SocialNetwork/communify_frontend/src/pages/Profile/Profile.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect } from 'react';\nimport { useParams, Link, useNavigate } from 'react-router-dom'; // Added useNavigate\nimport { observer } from 'mobx-react-lite';\nimport { Context } from '../../storage';\nimport ProfilePageHeader from '../../component/ProfilePageHeader/ProfilePageHeader';\nimport PostContainer from '../../component/PostContainer/PostContainer';\nimport ProfilePageSideBar from '../../component/ProfilePageSideBar/ProfilePageSideBar';\nimport classes from './Profile.module.css';\nimport { ROUTE } from '../../utils/consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = _s(observer(_c = _s(() => {\n  _s();\n  const {\n    userStore\n  } = useContext(Context); // Removed postStore if not used for fetching here\n  const {\n    id\n  } = useParams(); // ID пользователя из URL\n  const navigate = useNavigate(); // For redirection\n\n  // If no id in URL, it's current user's profile page (e.g., /me)\n  // userStore.userId is the ID of the authenticated user\n  const profileIdToLoad = id ? Number(id) : userStore.userId;\n  useEffect(() => {\n    const loadProfile = async () => {\n      if (profileIdToLoad) {\n        try {\n          // userStore.fetchUserProfile will fetch the user data,\n          // including 'posts' and 'groups' arrays as per your DTO.\n          // It will also update userStore.user if profileIdToLoad is the current user's ID.\n          await userStore.fetchUserProfile(profileIdToLoad);\n        } catch (error) {\n          // Error handling is done in store, but can add component-specific logic here\n          console.error(\"Failed to load profile in component:\", error);\n        }\n      } else if (!userStore.isAuth) {\n        // If trying to access a route like /me (where profileIdToLoad would be null/undefined initially if userStore.userId is null)\n        // and not authenticated, redirect to login.\n        navigate(ROUTE.LOGIN);\n      }\n    };\n    loadProfile();\n\n    // Cleanup currentProfile when component unmounts or profileIdToLoad changes,\n    // to avoid showing stale data briefly.\n    return () => {\n      // Check if the currentProfile in store matches the one we are leaving\n      if (userStore.currentProfile && userStore.currentProfile.id === profileIdToLoad && profileIdToLoad !== userStore.userId) {\n        // Don't clear if it's the logged-in user's own profile (userStore.user)\n        // Only clear userStore.currentProfile if it's not the logged-in user's profile\n        userStore.setCurrentProfile(null);\n      }\n    };\n  }, [profileIdToLoad, userStore, navigate]); // userStore is a dependency for its methods and state like userId/isAuth\n\n  // Determine which profile data to use:\n  // If viewing own profile, use userStore.user (which should be updated by fetchUserProfile).\n  // Otherwise, use userStore.currentProfile.\n  const profileData = profileIdToLoad === userStore.userId ? userStore.user : userStore.currentProfile;\n\n  // Posts are now directly from the profileData object\n  const posts = (profileData === null || profileData === void 0 ? void 0 : profileData.posts) || [];\n  if (userStore.loading && (!profileData || profileData.id !== profileIdToLoad)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.container,\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        children: \"Loading profile...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 49\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 14\n    }, this);\n  }\n  if (!(profileData !== null && profileData !== void 0 && profileData.id) && !userStore.loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.container,\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [\"Profile not found. \", /*#__PURE__*/_jsxDEV(Link, {\n          to: ROUTE.FEED,\n          children: \"Go to Feed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 74\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 49\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 14\n    }, this);\n  }\n  // Ensure profileData actually corresponds to profileIdToLoad, especially after error or navigating away\n  if ((profileData === null || profileData === void 0 ? void 0 : profileData.id) !== profileIdToLoad && !userStore.loading) {\n    // This can happen if fetch failed and currentProfile is stale or null\n    // Or if navigating from one profile to another and data hasn't updated yet.\n    // The loading check should mostly cover this, but as a fallback:\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.container,\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [\"Profile not available. \", /*#__PURE__*/_jsxDEV(Link, {\n          to: ROUTE.FEED,\n          children: \"Go to Feed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 80\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 51\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.leftPart,\n      children: [/*#__PURE__*/_jsxDEV(ProfilePageHeader, {\n        profileData: profileData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(PostContainer, {\n        posts: posts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.rightPart,\n      children: /*#__PURE__*/_jsxDEV(ProfilePageSideBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}, \"pD7bgFrPBwg7Qa2aMP0eO3syu7A=\", false, function () {\n  return [useParams, useNavigate];\n})), \"pD7bgFrPBwg7Qa2aMP0eO3syu7A=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c2 = Profile;\nexport default Profile;\nvar _c, _c2;\n$RefreshReg$(_c, \"Profile$observer\");\n$RefreshReg$(_c2, \"Profile\");","map":{"version":3,"names":["React","useContext","useEffect","useParams","Link","useNavigate","observer","Context","ProfilePageHeader","PostContainer","ProfilePageSideBar","classes","ROUTE","jsxDEV","_jsxDEV","Profile","_s","_c","userStore","id","navigate","profileIdToLoad","Number","userId","loadProfile","fetchUserProfile","error","console","isAuth","LOGIN","currentProfile","setCurrentProfile","profileData","user","posts","loading","className","container","children","fileName","_jsxFileName","lineNumber","columnNumber","to","FEED","leftPart","rightPart","_c2","$RefreshReg$"],"sources":["/home/alexey/Documents/source/java/SocialNetwork/communify_frontend/src/pages/Profile/Profile.jsx"],"sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { useParams, Link, useNavigate } from 'react-router-dom'; // Added useNavigate\nimport { observer } from 'mobx-react-lite';\nimport { Context } from '../../storage';\nimport ProfilePageHeader from '../../component/ProfilePageHeader/ProfilePageHeader';\nimport PostContainer from '../../component/PostContainer/PostContainer';\nimport ProfilePageSideBar from '../../component/ProfilePageSideBar/ProfilePageSideBar';\nimport classes from './Profile.module.css';\nimport { ROUTE } from '../../utils/consts';\n\nconst Profile = observer(() => {\n    const { userStore } = useContext(Context); // Removed postStore if not used for fetching here\n    const { id } = useParams(); // ID пользователя из URL\n    const navigate = useNavigate(); // For redirection\n\n    // If no id in URL, it's current user's profile page (e.g., /me)\n    // userStore.userId is the ID of the authenticated user\n    const profileIdToLoad = id ? Number(id) : userStore.userId;\n\n    useEffect(() => {\n        const loadProfile = async () => {\n            if (profileIdToLoad) {\n                try {\n                    // userStore.fetchUserProfile will fetch the user data,\n                    // including 'posts' and 'groups' arrays as per your DTO.\n                    // It will also update userStore.user if profileIdToLoad is the current user's ID.\n                    await userStore.fetchUserProfile(profileIdToLoad);\n                } catch (error) {\n                    // Error handling is done in store, but can add component-specific logic here\n                    console.error(\"Failed to load profile in component:\", error);\n                }\n            } else if (!userStore.isAuth) {\n                // If trying to access a route like /me (where profileIdToLoad would be null/undefined initially if userStore.userId is null)\n                // and not authenticated, redirect to login.\n                navigate(ROUTE.LOGIN);\n            }\n        };\n\n        loadProfile();\n\n        // Cleanup currentProfile when component unmounts or profileIdToLoad changes,\n        // to avoid showing stale data briefly.\n        return () => {\n            // Check if the currentProfile in store matches the one we are leaving\n            if (userStore.currentProfile && userStore.currentProfile.id === profileIdToLoad && profileIdToLoad !== userStore.userId) {\n                 // Don't clear if it's the logged-in user's own profile (userStore.user)\n                 // Only clear userStore.currentProfile if it's not the logged-in user's profile\n                userStore.setCurrentProfile(null);\n            }\n        };\n\n    }, [profileIdToLoad, userStore, navigate]); // userStore is a dependency for its methods and state like userId/isAuth\n\n    // Determine which profile data to use:\n    // If viewing own profile, use userStore.user (which should be updated by fetchUserProfile).\n    // Otherwise, use userStore.currentProfile.\n    const profileData = (profileIdToLoad === userStore.userId) ? userStore.user : userStore.currentProfile;\n\n    // Posts are now directly from the profileData object\n    const posts = profileData?.posts || [];\n\n    if (userStore.loading && (!profileData || profileData.id !== profileIdToLoad)) {\n      return <div className={classes.container}><main>Loading profile...</main></div>;\n    }\n    if (!profileData?.id && !userStore.loading) {\n      return <div className={classes.container}><main>Profile not found. <Link to={ROUTE.FEED}>Go to Feed</Link></main></div>;\n    }\n    // Ensure profileData actually corresponds to profileIdToLoad, especially after error or navigating away\n    if (profileData?.id !== profileIdToLoad && !userStore.loading) {\n        // This can happen if fetch failed and currentProfile is stale or null\n        // Or if navigating from one profile to another and data hasn't updated yet.\n        // The loading check should mostly cover this, but as a fallback:\n        return <div className={classes.container}><main>Profile not available. <Link to={ROUTE.FEED}>Go to Feed</Link></main></div>;\n    }\n\n\n    return (\n        <main className={classes.container}>\n            <div className={classes.leftPart}>\n                {/* ProfilePageHeader will use userStore.currentProfile or userStore.user internally,\n                    or you can pass profileData to it explicitly if needed.\n                    Assuming it gets data from the store directly based on context. */}\n                <ProfilePageHeader profileData={profileData} /> {/* Explicitly pass profileData */}\n                {/* {profileIdToLoad === userStore.userId && <CreatePostInput />} */}\n                <PostContainer posts={posts} /> {/* Pass the posts from profileData */}\n            </div>\n            <div className={classes.rightPart}>\n                {/* ProfilePageSideBar will also use userStore.currentProfile or userStore.user\n                    which now contain 'groups'. It should also be an observer. */}\n                <ProfilePageSideBar />\n            </div>\n        </main>\n    );\n});\n\nexport default Profile;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}