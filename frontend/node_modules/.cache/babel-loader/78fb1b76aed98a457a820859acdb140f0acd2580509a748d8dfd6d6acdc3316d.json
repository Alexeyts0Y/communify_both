{"ast":null,"code":"import $api from \"../http\";\nexport const GroupAPI = {\n  createGroup: async (groupData, imageFile) => {\n    // groupData: { name, description, userId (creator) }\n    const formData = new FormData();\n    formData.append('group', new Blob([JSON.stringify(groupData)], {\n      type: 'application/json'\n    }));\n    if (imageFile) {\n      formData.append('image', imageFile); // 'image' как в контроллере\n    }\n    const response = await $api.post(`/groups/new`, formData);\n    return response.data; // GroupResponseDto\n  },\n  getGroupById: async groupId => {\n    const response = await $api.get(`/groups/${groupId}`);\n    return response.data; // GroupResponseDto\n  },\n  updateGroup: async (groupId, groupData, imageFile) => {\n    // groupData: { name, description }\n    const formData = new FormData();\n    formData.append('group', new Blob([JSON.stringify(groupData)], {\n      type: 'application/json'\n    }));\n    if (imageFile) {\n      formData.append('image', imageFile);\n    }\n    const response = await $api.patch(`/groups/${groupId}/edit`, formData);\n    return response.data; // GroupResponseDto\n  },\n  deleteGroup: async groupId => {\n    const response = await $api.delete(`/groups/${groupId}/delete`); // Предполагаемый эндпоинт\n    return response.data;\n  },\n  joinGroup: async groupId => {\n    const response = await $api.post(`/groups/${groupId}/join`); // Предполагаемый эндпоинт\n    return response.data; // GroupMemberDto или GroupResponseDto\n  },\n  leaveGroup: async groupId => {\n    const response = await $api.post(`/groups/${groupId}/leave`); // Предполагаемый эндпоинт\n    return response.data;\n  },\n  getGroupMembers: async groupId => {\n    const response = await $api.get(`/groups/${groupId}/members`); // Предполагаемый эндпоинт\n    return response.data; // List<GroupMemberDto>\n  },\n  // Получение групп, в которых состоит пользователь (может быть частью UserResponseDto)\n  getUserGroups: async userId => {\n    // userId может быть 'me'\n    const response = await $api.get(`/users/${userId}/groups`); // Предполагаемый эндпоинт\n    return response.data; // List<UserGroupDto> или List<GroupMinimalResponseDto>\n  },\n  // Если есть эндпоинт для рекомендованных/интересных групп\n  getInterestingGroups: async () => {\n    const response = await $api.get(`/groups/interesting`); // Предполагаемый эндпоинт\n    return response.data; // List<GroupMinimalResponseDto>\n  }\n};","map":{"version":3,"names":["$api","GroupAPI","createGroup","groupData","imageFile","formData","FormData","append","Blob","JSON","stringify","type","response","post","data","getGroupById","groupId","get","updateGroup","patch","deleteGroup","delete","joinGroup","leaveGroup","getGroupMembers","getUserGroups","userId","getInterestingGroups"],"sources":["/home/alexey/Documents/source/java/SocialNetwork/communify_frontend/src/api/groupApi.js"],"sourcesContent":["import $api from \"../http\";\n\nexport const GroupAPI = {\n    createGroup: async (groupData, imageFile) => { // groupData: { name, description, userId (creator) }\n        const formData = new FormData();\n        formData.append('group', new Blob([JSON.stringify(groupData)], { type: 'application/json' }));\n        if (imageFile) {\n            formData.append('image', imageFile); // 'image' как в контроллере\n        }\n        const response = await $api.post(`/groups/new`, formData);\n        return response.data; // GroupResponseDto\n    },\n\n    getGroupById: async (groupId) => {\n        const response = await $api.get(`/groups/${groupId}`);\n        return response.data; // GroupResponseDto\n    },\n\n    updateGroup: async (groupId, groupData, imageFile) => { // groupData: { name, description }\n        const formData = new FormData();\n        formData.append('group', new Blob([JSON.stringify(groupData)], { type: 'application/json' }));\n        if (imageFile) {\n            formData.append('image', imageFile);\n        }\n        const response = await $api.patch(`/groups/${groupId}/edit`, formData);\n        return response.data; // GroupResponseDto\n    },\n\n    deleteGroup: async (groupId) => {\n        const response = await $api.delete(`/groups/${groupId}/delete`); // Предполагаемый эндпоинт\n        return response.data;\n    },\n\n    joinGroup: async (groupId) => {\n        const response = await $api.post(`/groups/${groupId}/join`); // Предполагаемый эндпоинт\n        return response.data; // GroupMemberDto или GroupResponseDto\n    },\n\n    leaveGroup: async (groupId) => {\n        const response = await $api.post(`/groups/${groupId}/leave`); // Предполагаемый эндпоинт\n        return response.data;\n    },\n\n    getGroupMembers: async (groupId) => {\n        const response = await $api.get(`/groups/${groupId}/members`); // Предполагаемый эндпоинт\n        return response.data; // List<GroupMemberDto>\n    },\n\n    // Получение групп, в которых состоит пользователь (может быть частью UserResponseDto)\n    getUserGroups: async (userId) => { // userId может быть 'me'\n        const response = await $api.get(`/users/${userId}/groups`); // Предполагаемый эндпоинт\n        return response.data; // List<UserGroupDto> или List<GroupMinimalResponseDto>\n    },\n\n    // Если есть эндпоинт для рекомендованных/интересных групп\n    getInterestingGroups: async () => {\n        const response = await $api.get(`/groups/interesting`); // Предполагаемый эндпоинт\n        return response.data; // List<GroupMinimalResponseDto>\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}