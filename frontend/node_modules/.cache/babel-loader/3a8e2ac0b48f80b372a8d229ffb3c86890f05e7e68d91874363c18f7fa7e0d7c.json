{"ast":null,"code":"import { makeAutoObservable, runInAction } from \"mobx\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { AuthAPI } from \"../api/authApi\";\nimport { UserAPI } from \"../api/userApi\";\nexport class UserStore {\n  constructor() {\n    this._isAuth = false;\n    this._user = {};\n    // Данные текущего авторизованного пользователя (UserResponseDto или UserMinimalResponseDto)\n    this._token = null;\n    this._currentProfile = null;\n    // Данные просматриваемого профиля (UserResponseDto)\n    this._searchResults = [];\n    this._loading = false;\n    this._error = null;\n    makeAutoObservable(this);\n    this.loadToken(); // Попробуем загрузить токен при инициализации\n  }\n\n  // Setters & Actions\n  setLoading(bool) {\n    this._loading = bool;\n  }\n  setError(error) {\n    this._error = error;\n  }\n  setIsAuth(bool) {\n    this._isAuth = bool;\n  }\n  setUser(user) {\n    this._user = user;\n  }\n  setToken(token) {\n    this._token = token;\n    if (token) {\n      localStorage.setItem('token', token);\n      this.setIsAuth(true);\n      try {\n        const decoded = jwtDecode(token);\n        // Предполагаем, что токен содержит id, email, roles и другие поля пользователя\n        // Если нет, то после setToken нужно будет сделать запрос на /users/me\n        this.setUser({\n          id: decoded.id,\n          email: decoded.email,\n          roles: decoded.roles || [],\n          firstName: decoded.firstName,\n          // если есть в токене\n          lastName: decoded.lastName,\n          // если есть в токене\n          avatarUrl: decoded.avatarUrl // если есть в токене\n          // ... другие поля из токена\n        });\n        // Если токен минимальный, загружаем полные данные пользователя\n        if (!this._user.firstName && this._user.id) {\n          // Пример условия\n          this.fetchCurrentUser();\n        }\n      } catch (e) {\n        console.error(\"Failed to decode token or set user:\", e);\n        this.logout(); // Если токен невалидный\n      }\n    } else {\n      localStorage.removeItem('token');\n      this.setIsAuth(false);\n      this.setUser({});\n    }\n  }\n  setCurrentProfile(user) {\n    this._currentProfile = user;\n  }\n  setSearchResults(users) {\n    this._searchResults = users;\n  }\n  loadToken() {\n    const token = localStorage.getItem('token');\n    if (token) {\n      this.setToken(token);\n    }\n  }\n  async login(username, password) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const data = await AuthAPI.login(username, password); // Ожидаем { token: \"...\" }\n      runInAction(() => {\n        this.setToken(data.token);\n      });\n      return true;\n    } catch (e) {\n      runInAction(() => {\n        var _e$response, _e$response$data;\n        this.setError(((_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.message) || \"Login failed\");\n      });\n      console.error(e);\n      return false;\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async register(userData) {\n    // { username, email, firstName, lastName, password }\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const data = await AuthAPI.register(userData);\n      runInAction(() => {\n        // Если регистрация сразу возвращает токен и логинит\n        if (data.token) {\n          this.setToken(data.token);\n        } else {\n          // Возможно, нужно перенаправить на логин или обработать иначе\n          console.log(\"Registration successful, please login.\", data);\n        }\n      });\n      return true;\n    } catch (e) {\n      runInAction(() => {\n        var _e$response2, _e$response2$data;\n        this.setError(((_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.message) || \"Registration failed\");\n      });\n      console.error(e);\n      return false;\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  logout() {\n    this.setToken(null);\n    // Опционально: редирект на страницу логина\n  }\n  async fetchCurrentUser() {\n    // Получить данные о себе (/users/me или /users/{id} из токена)\n    if (!this.userId) return;\n    this.setLoading(true);\n    try {\n      // Предположим, что /users/me эндпоинт существует или используем ID из токена\n      const userData = await UserAPI.getUserById(this.userId);\n      runInAction(() => {\n        this.setUser(userData); // Обновляем пользователя полными данными\n      });\n    } catch (e) {\n      console.error(\"Failed to fetch current user data\", e);\n      runInAction(() => {\n        var _e$response3, _e$response3$data;\n        this.setError(((_e$response3 = e.response) === null || _e$response3 === void 0 ? void 0 : (_e$response3$data = _e$response3.data) === null || _e$response3$data === void 0 ? void 0 : _e$response3$data.message) || \"Failed to fetch user data\");\n      });\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async fetchUserProfile(userId) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const userData = await UserAPI.getUserById(userId);\n      runInAction(() => {\n        this.setCurrentProfile(userData);\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response4, _e$response4$data;\n        this.setError(((_e$response4 = e.response) === null || _e$response4 === void 0 ? void 0 : (_e$response4$data = _e$response4.data) === null || _e$response4$data === void 0 ? void 0 : _e$response4$data.message) || \"Failed to fetch profile\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async updateUser(userId, userData, avatarFile) {\n    // userData: { firstName, lastName, email }\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const updatedUser = await UserAPI.updateUser(userId, userData, avatarFile);\n      runInAction(() => {\n        if (userId === this.userId) {\n          this.setUser(updatedUser); // Обновляем текущего пользователя\n        }\n        this.setCurrentProfile(updatedUser); // Обновляем просматриваемый профиль\n      });\n      return true;\n    } catch (e) {\n      runInAction(() => {\n        var _e$response5, _e$response5$data;\n        this.setError(((_e$response5 = e.response) === null || _e$response5 === void 0 ? void 0 : (_e$response5$data = _e$response5.data) === null || _e$response5$data === void 0 ? void 0 : _e$response5$data.message) || \"Failed to update profile\");\n      });\n      console.error(e);\n      return false;\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async changePassword(oldPassword, newPassword) {\n    if (!this.userId) return false;\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      await AuthAPI.changePassword(this.userId, oldPassword, newPassword);\n      // Пароль изменен, возможно, стоит разлогинить или просто показать сообщение\n      return true;\n    } catch (e) {\n      runInAction(() => {\n        var _e$response6, _e$response6$data;\n        this.setError(((_e$response6 = e.response) === null || _e$response6 === void 0 ? void 0 : (_e$response6$data = _e$response6.data) === null || _e$response6$data === void 0 ? void 0 : _e$response6$data.message) || \"Failed to change password\");\n      });\n      console.error(e);\n      return false;\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n\n  // Getters\n  get isAuth() {\n    return this._isAuth;\n  }\n  get user() {\n    return this._user;\n  }\n  get userId() {\n    var _this$_user;\n    return ((_this$_user = this._user) === null || _this$_user === void 0 ? void 0 : _this$_user.id) || null;\n  }\n  get currentProfile() {\n    return this._currentProfile;\n  }\n  get searchResults() {\n    return this._searchResults;\n  }\n  get token() {\n    return this._token;\n  }\n  get loading() {\n    return this._loading;\n  }\n  get error() {\n    return this._error;\n  }\n  isGroupAdmin(groupId) {\n    if (!this._token) return false;\n    try {\n      const decoded = jwtDecode(this._token);\n      const roles = decoded.roles || [];\n      return roles.includes(`GROUP_${groupId}_ADMIN`);\n    } catch (e) {\n      return false;\n    }\n  }\n}","map":{"version":3,"names":["makeAutoObservable","runInAction","jwtDecode","AuthAPI","UserAPI","UserStore","constructor","_isAuth","_user","_token","_currentProfile","_searchResults","_loading","_error","loadToken","setLoading","bool","setError","error","setIsAuth","setUser","user","setToken","token","localStorage","setItem","decoded","id","email","roles","firstName","lastName","avatarUrl","fetchCurrentUser","e","console","logout","removeItem","setCurrentProfile","setSearchResults","users","getItem","login","username","password","data","_e$response","_e$response$data","response","message","register","userData","log","_e$response2","_e$response2$data","userId","getUserById","_e$response3","_e$response3$data","fetchUserProfile","_e$response4","_e$response4$data","updateUser","avatarFile","updatedUser","_e$response5","_e$response5$data","changePassword","oldPassword","newPassword","_e$response6","_e$response6$data","isAuth","_this$_user","currentProfile","searchResults","loading","isGroupAdmin","groupId","includes"],"sources":["/home/alexey/Documents/source/java/SocialNetwork/communify_frontend/src/storage/UserStore.js"],"sourcesContent":["import { makeAutoObservable, runInAction } from \"mobx\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { AuthAPI } from \"../api/authApi\";\nimport { UserAPI } from \"../api/userApi\";\n\nexport class UserStore {\n    _isAuth = false;\n    _user = {}; // Данные текущего авторизованного пользователя (UserResponseDto или UserMinimalResponseDto)\n    _token = null;\n    _currentProfile = null; // Данные просматриваемого профиля (UserResponseDto)\n    _searchResults = [];\n    _loading = false;\n    _error = null;\n\n    constructor() {\n        makeAutoObservable(this);\n        this.loadToken(); // Попробуем загрузить токен при инициализации\n    }\n\n    // Setters & Actions\n    setLoading(bool) {\n        this._loading = bool;\n    }\n\n    setError(error) {\n        this._error = error;\n    }\n\n    setIsAuth(bool) {\n        this._isAuth = bool;\n    }\n\n    setUser(user) {\n        this._user = user;\n    }\n\n    setToken(token) {\n        this._token = token;\n        if (token) {\n            localStorage.setItem('token', token);\n            this.setIsAuth(true);\n            try {\n                const decoded = jwtDecode(token);\n                // Предполагаем, что токен содержит id, email, roles и другие поля пользователя\n                // Если нет, то после setToken нужно будет сделать запрос на /users/me\n                this.setUser({\n                    id: decoded.id,\n                    email: decoded.email,\n                    roles: decoded.roles || [],\n                    firstName: decoded.firstName, // если есть в токене\n                    lastName: decoded.lastName,   // если есть в токене\n                    avatarUrl: decoded.avatarUrl, // если есть в токене\n                    // ... другие поля из токена\n                });\n                // Если токен минимальный, загружаем полные данные пользователя\n                if (!this._user.firstName && this._user.id) { // Пример условия\n                    this.fetchCurrentUser();\n                }\n            } catch (e) {\n                console.error(\"Failed to decode token or set user:\", e);\n                this.logout(); // Если токен невалидный\n            }\n        } else {\n            localStorage.removeItem('token');\n            this.setIsAuth(false);\n            this.setUser({});\n        }\n    }\n\n    setCurrentProfile(user) {\n        this._currentProfile = user;\n    }\n\n    setSearchResults(users) {\n        this._searchResults = users;\n    }\n\n    loadToken() {\n        const token = localStorage.getItem('token');\n        if (token) {\n            this.setToken(token);\n        }\n    }\n\n    async login(username, password) {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const data = await AuthAPI.login(username, password); // Ожидаем { token: \"...\" }\n            runInAction(() => {\n                this.setToken(data.token);\n            });\n            return true;\n        } catch (e) {\n            runInAction(() => {\n                this.setError(e.response?.data?.message || \"Login failed\");\n            });\n            console.error(e);\n            return false;\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async register(userData) { // { username, email, firstName, lastName, password }\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const data = await AuthAPI.register(userData);\n            runInAction(() => {\n                // Если регистрация сразу возвращает токен и логинит\n                if (data.token) {\n                    this.setToken(data.token);\n                } else {\n                    // Возможно, нужно перенаправить на логин или обработать иначе\n                    console.log(\"Registration successful, please login.\", data);\n                }\n            });\n            return true;\n        } catch (e) {\n            runInAction(() => {\n                this.setError(e.response?.data?.message || \"Registration failed\");\n            });\n            console.error(e);\n            return false;\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    logout() {\n        this.setToken(null);\n        // Опционально: редирект на страницу логина\n    }\n\n    async fetchCurrentUser() { // Получить данные о себе (/users/me или /users/{id} из токена)\n        if (!this.userId) return;\n        this.setLoading(true);\n        try {\n            // Предположим, что /users/me эндпоинт существует или используем ID из токена\n            const userData = await UserAPI.getUserById(this.userId);\n            runInAction(() => {\n                this.setUser(userData); // Обновляем пользователя полными данными\n            });\n        } catch (e) {\n            console.error(\"Failed to fetch current user data\", e);\n            runInAction(() => {\n                 this.setError(e.response?.data?.message || \"Failed to fetch user data\");\n            });\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async fetchUserProfile(userId) {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const userData = await UserAPI.getUserById(userId);\n            runInAction(() => {\n                this.setCurrentProfile(userData);\n            });\n        } catch (e) {\n            runInAction(() => {\n                this.setError(e.response?.data?.message || \"Failed to fetch profile\");\n            });\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async updateUser(userId, userData, avatarFile) { // userData: { firstName, lastName, email }\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const updatedUser = await UserAPI.updateUser(userId, userData, avatarFile);\n            runInAction(() => {\n                if (userId === this.userId) {\n                    this.setUser(updatedUser); // Обновляем текущего пользователя\n                }\n                this.setCurrentProfile(updatedUser); // Обновляем просматриваемый профиль\n            });\n            return true;\n        } catch (e) {\n             runInAction(() => {\n                this.setError(e.response?.data?.message || \"Failed to update profile\");\n            });\n            console.error(e);\n            return false;\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async changePassword(oldPassword, newPassword) {\n        if (!this.userId) return false;\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            await AuthAPI.changePassword(this.userId, oldPassword, newPassword);\n            // Пароль изменен, возможно, стоит разлогинить или просто показать сообщение\n            return true;\n        } catch (e) {\n            runInAction(() => {\n                this.setError(e.response?.data?.message || \"Failed to change password\");\n            });\n            console.error(e);\n            return false;\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    // Getters\n    get isAuth() { return this._isAuth; }\n    get user() { return this._user; }\n    get userId() { return this._user?.id || null; }\n    get currentProfile() { return this._currentProfile; }\n    get searchResults() { return this._searchResults; }\n    get token() { return this._token; }\n    get loading() { return this._loading; }\n    get error() { return this._error; }\n\n    isGroupAdmin(groupId) {\n        if (!this._token) return false;\n        try {\n            const decoded = jwtDecode(this._token);\n            const roles = decoded.roles || [];\n            return roles.includes(`GROUP_${groupId}_ADMIN`);\n        } catch (e) {\n            return false;\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}