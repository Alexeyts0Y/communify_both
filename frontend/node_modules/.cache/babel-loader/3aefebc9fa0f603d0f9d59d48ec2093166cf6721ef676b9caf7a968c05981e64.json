{"ast":null,"code":"import { makeAutoObservable, runInAction } from \"mobx\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { AuthAPI } from \"../api/authApi\";\nimport { UserAPI } from \"../api/userApi\";\nexport class UserStore {\n  constructor() {\n    this._isAuth = false;\n    this._user = {};\n    // Данные текущего авторизованного пользователя (UserResponseDto)\n    this._token = null;\n    this._currentProfile = null;\n    // Данные просматриваемого профиля (UserResponseDto)\n    this._searchResults = [];\n    this._loading = false;\n    this._error = null;\n    makeAutoObservable(this);\n    this.loadToken();\n  }\n\n  // Setters & Actions\n  setLoading(bool) {\n    this._loading = bool;\n  }\n  setError(error) {\n    this._error = error;\n  }\n  setIsAuth(bool) {\n    this._isAuth = bool;\n  }\n  setUser(user) {\n    // user is UserResponseDto, potentially with posts and groups\n    this._user = user;\n  }\n  setToken(token) {\n    this._token = token;\n    if (token) {\n      localStorage.setItem('token', token);\n      this.setIsAuth(true);\n      try {\n        const decoded = jwtDecode(token);\n        // Initial user object from token (might be minimal)\n        const minimalUser = {\n          id: decoded.id,\n          email: decoded.email,\n          roles: decoded.roles || [],\n          firstName: decoded.firstName,\n          lastName: decoded.lastName,\n          avatarUrl: decoded.avatarUrl\n        };\n        // Set user based on token, but this might not have posts/groups yet\n        this.setUser(minimalUser);\n\n        // If user details from token are minimal, fetch full profile\n        // This fetchCurrentUser should ideally get the UserResponseDto with posts and groups\n        // if you want them immediately available in userStore.user\n        if (!this._user.firstName && this._user.id) {\n          // Example condition\n          this.fetchCurrentUser(); // This should fetch UserResponseDto\n        }\n      } catch (e) {\n        console.error(\"Failed to decode token or set user:\", e);\n        this.logout();\n      }\n    } else {\n      localStorage.removeItem('token');\n      this.setIsAuth(false);\n      this.setUser({});\n    }\n  }\n  setCurrentProfile(user) {\n    // user is UserResponseDto, with posts and groups\n    this._currentProfile = user;\n  }\n  setSearchResults(users) {\n    this._searchResults = users;\n  }\n  loadToken() {\n    const token = localStorage.getItem('token');\n    if (token) {\n      this.setToken(token);\n    }\n  }\n  async login(username, password) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const data = await AuthAPI.login(username, password);\n      runInAction(() => {\n        this.setToken(data.token);\n        // After login, setToken calls fetchCurrentUser if needed,\n        // or fetchCurrentUser explicitly here if setToken doesn't.\n        // To ensure userStore.user has posts and groups, fetchCurrentUser needs to get the full DTO.\n        if (this.userId) {\n          this.fetchCurrentUser(); // Ensure full profile is loaded into userStore.user\n        }\n      });\n      return true;\n    } catch (e) {\n      runInAction(() => {\n        var _e$response, _e$response$data;\n        this.setError(((_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.message) || \"Login failed\");\n      });\n      console.error(e);\n      return false;\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async register(userData) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const data = await AuthAPI.register(userData);\n      runInAction(() => {\n        if (data.token) {\n          this.setToken(data.token);\n          if (this.userId) {\n            this.fetchCurrentUser(); // Ensure full profile is loaded into userStore.user\n          }\n        } else {\n          console.log(\"Registration successful, please login.\", data);\n        }\n      });\n      return true;\n    } catch (e) {\n      runInAction(() => {\n        var _e$response2, _e$response2$data;\n        this.setError(((_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.message) || \"Registration failed\");\n      });\n      console.error(e);\n      return false;\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  logout() {\n    this.setToken(null);\n  }\n  async fetchCurrentUser() {\n    if (!this.userId) return;\n    this.setLoading(true);\n    try {\n      // This call should return the UserResponseDto including 'posts' and 'groups' arrays\n      const userData = await UserAPI.getUserById(this.userId);\n      runInAction(() => {\n        this.setUser(userData); // Updates userStore.user with full data\n      });\n    } catch (e) {\n      console.error(\"Failed to fetch current user data\", e);\n      runInAction(() => {\n        var _e$response3, _e$response3$data;\n        this.setError(((_e$response3 = e.response) === null || _e$response3 === void 0 ? void 0 : (_e$response3$data = _e$response3.data) === null || _e$response3$data === void 0 ? void 0 : _e$response3$data.message) || \"Failed to fetch user data\");\n      });\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async fetchUserProfile(userId) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const numericUserId = Number(userId); // Ensure userId is number for comparison\n      // This call must return UserResponseDto including 'posts' and 'groups'\n      const userData = await UserAPI.getUserById(numericUserId);\n      runInAction(() => {\n        this.setCurrentProfile(userData); // Populates userStore.currentProfile\n\n        // If the fetched profile is for the currently authenticated user,\n        // also update userStore.user with this complete data.\n        if (this.userId && numericUserId === this.userId) {\n          this.setUser(userData);\n        }\n      });\n      return userData; // Return for potential chaining\n    } catch (e) {\n      runInAction(() => {\n        var _e$response4, _e$response4$data;\n        this.setError(((_e$response4 = e.response) === null || _e$response4 === void 0 ? void 0 : (_e$response4$data = _e$response4.data) === null || _e$response4$data === void 0 ? void 0 : _e$response4$data.message) || \"Failed to fetch profile\");\n      });\n      console.error(e);\n      throw e; // Re-throw for component to handle if needed\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async updateUser(userId, userData, avatarFile) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const numericUserId = Number(userId);\n      // Assume updateUser API returns the updated UserResponseDto (potentially with posts/groups)\n      const updatedUser = await UserAPI.updateUser(numericUserId, userData, avatarFile);\n      runInAction(() => {\n        // If updated profile is the current user, update userStore.user\n        if (numericUserId === this.userId) {\n          // Merge or replace? If updatedUser contains posts/groups, direct set is fine.\n          // If API returns only updated fields, a merge might be needed with existing this._user.\n          // Assuming it returns the full UserResponseDto:\n          this.setUser(updatedUser);\n        }\n        // If updated profile is the one being viewed (userStore.currentProfile)\n        if (this._currentProfile && this._currentProfile.id === numericUserId) {\n          this.setCurrentProfile(updatedUser);\n        }\n      });\n      return true;\n    } catch (e) {\n      runInAction(() => {\n        var _e$response5, _e$response5$data;\n        this.setError(((_e$response5 = e.response) === null || _e$response5 === void 0 ? void 0 : (_e$response5$data = _e$response5.data) === null || _e$response5$data === void 0 ? void 0 : _e$response5$data.message) || \"Failed to update profile\");\n      });\n      console.error(e);\n      return false;\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async changePassword(oldPassword, newPassword) {\n    if (!this.userId) return false;\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      await AuthAPI.changePassword(this.userId, oldPassword, newPassword);\n      return true;\n    } catch (e) {\n      runInAction(() => {\n        var _e$response6, _e$response6$data;\n        this.setError(((_e$response6 = e.response) === null || _e$response6 === void 0 ? void 0 : (_e$response6$data = _e$response6.data) === null || _e$response6$data === void 0 ? void 0 : _e$response6$data.message) || \"Failed to change password\");\n      });\n      console.error(e);\n      return false;\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n\n  // Getters\n  get isAuth() {\n    return this._isAuth;\n  }\n  get user() {\n    return this._user;\n  } // Should now contain posts & groups if fetched\n  get userId() {\n    var _this$_user;\n    return ((_this$_user = this._user) === null || _this$_user === void 0 ? void 0 : _this$_user.id) || null;\n  }\n  get currentProfile() {\n    return this._currentProfile;\n  } // Should now contain posts & groups\n  get searchResults() {\n    return this._searchResults;\n  }\n  get token() {\n    return this._token;\n  }\n  get loading() {\n    return this._loading;\n  }\n  get error() {\n    return this._error;\n  }\n  isGroupAdmin(groupId) {\n    if (!this._token) return false;\n    try {\n      const decoded = jwtDecode(this._token);\n      const roles = decoded.roles || [];\n      return roles.includes(`GROUP_${groupId}_ADMIN`);\n    } catch (e) {\n      return false;\n    }\n  }\n}","map":{"version":3,"names":["makeAutoObservable","runInAction","jwtDecode","AuthAPI","UserAPI","UserStore","constructor","_isAuth","_user","_token","_currentProfile","_searchResults","_loading","_error","loadToken","setLoading","bool","setError","error","setIsAuth","setUser","user","setToken","token","localStorage","setItem","decoded","minimalUser","id","email","roles","firstName","lastName","avatarUrl","fetchCurrentUser","e","console","logout","removeItem","setCurrentProfile","setSearchResults","users","getItem","login","username","password","data","userId","_e$response","_e$response$data","response","message","register","userData","log","_e$response2","_e$response2$data","getUserById","_e$response3","_e$response3$data","fetchUserProfile","numericUserId","Number","_e$response4","_e$response4$data","updateUser","avatarFile","updatedUser","_e$response5","_e$response5$data","changePassword","oldPassword","newPassword","_e$response6","_e$response6$data","isAuth","_this$_user","currentProfile","searchResults","loading","isGroupAdmin","groupId","includes"],"sources":["/home/alexey/Documents/source/java/SocialNetwork/communify_frontend/src/storage/UserStore.js"],"sourcesContent":["import { makeAutoObservable, runInAction } from \"mobx\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { AuthAPI } from \"../api/authApi\";\nimport { UserAPI } from \"../api/userApi\";\n\nexport class UserStore {\n    _isAuth = false;\n    _user = {}; // Данные текущего авторизованного пользователя (UserResponseDto)\n    _token = null;\n    _currentProfile = null; // Данные просматриваемого профиля (UserResponseDto)\n    _searchResults = [];\n    _loading = false;\n    _error = null;\n\n    constructor() {\n        makeAutoObservable(this);\n        this.loadToken();\n    }\n\n    // Setters & Actions\n    setLoading(bool) {\n        this._loading = bool;\n    }\n\n    setError(error) {\n        this._error = error;\n    }\n\n    setIsAuth(bool) {\n        this._isAuth = bool;\n    }\n\n    setUser(user) { // user is UserResponseDto, potentially with posts and groups\n        this._user = user;\n    }\n\n    setToken(token) {\n        this._token = token;\n        if (token) {\n            localStorage.setItem('token', token);\n            this.setIsAuth(true);\n            try {\n                const decoded = jwtDecode(token);\n                // Initial user object from token (might be minimal)\n                const minimalUser = {\n                    id: decoded.id,\n                    email: decoded.email,\n                    roles: decoded.roles || [],\n                    firstName: decoded.firstName,\n                    lastName: decoded.lastName,\n                    avatarUrl: decoded.avatarUrl,\n                };\n                // Set user based on token, but this might not have posts/groups yet\n                this.setUser(minimalUser);\n\n                // If user details from token are minimal, fetch full profile\n                // This fetchCurrentUser should ideally get the UserResponseDto with posts and groups\n                // if you want them immediately available in userStore.user\n                if (!this._user.firstName && this._user.id) { // Example condition\n                    this.fetchCurrentUser(); // This should fetch UserResponseDto\n                }\n            } catch (e) {\n                console.error(\"Failed to decode token or set user:\", e);\n                this.logout();\n            }\n        } else {\n            localStorage.removeItem('token');\n            this.setIsAuth(false);\n            this.setUser({});\n        }\n    }\n\n    setCurrentProfile(user) { // user is UserResponseDto, with posts and groups\n        this._currentProfile = user;\n    }\n\n    setSearchResults(users) {\n        this._searchResults = users;\n    }\n\n    loadToken() {\n        const token = localStorage.getItem('token');\n        if (token) {\n            this.setToken(token);\n        }\n    }\n\n    async login(username, password) {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const data = await AuthAPI.login(username, password);\n            runInAction(() => {\n                this.setToken(data.token);\n                // After login, setToken calls fetchCurrentUser if needed,\n                // or fetchCurrentUser explicitly here if setToken doesn't.\n                // To ensure userStore.user has posts and groups, fetchCurrentUser needs to get the full DTO.\n                if (this.userId) {\n                    this.fetchCurrentUser(); // Ensure full profile is loaded into userStore.user\n                }\n            });\n            return true;\n        } catch (e) {\n            runInAction(() => {\n                this.setError(e.response?.data?.message || \"Login failed\");\n            });\n            console.error(e);\n            return false;\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async register(userData) {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const data = await AuthAPI.register(userData);\n            runInAction(() => {\n                if (data.token) {\n                    this.setToken(data.token);\n                     if (this.userId) {\n                        this.fetchCurrentUser(); // Ensure full profile is loaded into userStore.user\n                    }\n                } else {\n                    console.log(\"Registration successful, please login.\", data);\n                }\n            });\n            return true;\n        } catch (e) {\n            runInAction(() => {\n                this.setError(e.response?.data?.message || \"Registration failed\");\n            });\n            console.error(e);\n            return false;\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    logout() {\n        this.setToken(null);\n    }\n\n    async fetchCurrentUser() {\n        if (!this.userId) return;\n        this.setLoading(true);\n        try {\n            // This call should return the UserResponseDto including 'posts' and 'groups' arrays\n            const userData = await UserAPI.getUserById(this.userId);\n            runInAction(() => {\n                this.setUser(userData); // Updates userStore.user with full data\n            });\n        } catch (e) {\n            console.error(\"Failed to fetch current user data\", e);\n            runInAction(() => {\n                 this.setError(e.response?.data?.message || \"Failed to fetch user data\");\n            });\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async fetchUserProfile(userId) {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const numericUserId = Number(userId); // Ensure userId is number for comparison\n            // This call must return UserResponseDto including 'posts' and 'groups'\n            const userData = await UserAPI.getUserById(numericUserId);\n            runInAction(() => {\n                this.setCurrentProfile(userData); // Populates userStore.currentProfile\n\n                // If the fetched profile is for the currently authenticated user,\n                // also update userStore.user with this complete data.\n                if (this.userId && numericUserId === this.userId) {\n                    this.setUser(userData);\n                }\n            });\n            return userData; // Return for potential chaining\n        } catch (e) {\n            runInAction(() => {\n                this.setError(e.response?.data?.message || \"Failed to fetch profile\");\n            });\n            console.error(e);\n            throw e; // Re-throw for component to handle if needed\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async updateUser(userId, userData, avatarFile) {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const numericUserId = Number(userId);\n            // Assume updateUser API returns the updated UserResponseDto (potentially with posts/groups)\n            const updatedUser = await UserAPI.updateUser(numericUserId, userData, avatarFile);\n            runInAction(() => {\n                // If updated profile is the current user, update userStore.user\n                if (numericUserId === this.userId) {\n                    // Merge or replace? If updatedUser contains posts/groups, direct set is fine.\n                    // If API returns only updated fields, a merge might be needed with existing this._user.\n                    // Assuming it returns the full UserResponseDto:\n                    this.setUser(updatedUser);\n                }\n                // If updated profile is the one being viewed (userStore.currentProfile)\n                if (this._currentProfile && this._currentProfile.id === numericUserId) {\n                    this.setCurrentProfile(updatedUser);\n                }\n            });\n            return true;\n        } catch (e) {\n             runInAction(() => {\n                this.setError(e.response?.data?.message || \"Failed to update profile\");\n            });\n            console.error(e);\n            return false;\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async changePassword(oldPassword, newPassword) {\n        if (!this.userId) return false;\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            await AuthAPI.changePassword(this.userId, oldPassword, newPassword);\n            return true;\n        } catch (e) {\n            runInAction(() => {\n                this.setError(e.response?.data?.message || \"Failed to change password\");\n            });\n            console.error(e);\n            return false;\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    // Getters\n    get isAuth() { return this._isAuth; }\n    get user() { return this._user; } // Should now contain posts & groups if fetched\n    get userId() { return this._user?.id || null; }\n    get currentProfile() { return this._currentProfile; } // Should now contain posts & groups\n    get searchResults() { return this._searchResults; }\n    get token() { return this._token; }\n    get loading() { return this._loading; }\n    get error() { return this._error; }\n\n    isGroupAdmin(groupId) {\n        if (!this._token) return false;\n        try {\n            const decoded = jwtDecode(this._token);\n            const roles = decoded.roles || [];\n            return roles.includes(`GROUP_${groupId}_ADMIN`);\n        } catch (e) {\n            return false;\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}