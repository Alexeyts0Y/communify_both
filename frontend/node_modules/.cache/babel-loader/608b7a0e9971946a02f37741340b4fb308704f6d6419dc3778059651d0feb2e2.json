{"ast":null,"code":"import $api from \"../http\";\nexport const UserAPI = {\n  getUserById: async userId => {\n    const response = await $api.get(`/users/${userId}`);\n    return response.data; // UserResponseDto\n  },\n  updateUser: async (userId, userData, avatarFile) => {\n    const formData = new FormData();\n    formData.append('user', new Blob([JSON.stringify(userData)], {\n      type: 'application/json'\n    }));\n    if (avatarFile) {\n      formData.append('avatar', avatarFile);\n    }\n    // Axios сам установит Content-Type: multipart/form-data\n    const response = await $api.patch(`/users/${userId}`, formData);\n    return response.data; // UserResponseDto\n  },\n  // Если есть поиск пользователей\n  searchUsers: async query => {\n    const response = await $api.get(`/users/search?query=${query}`);\n    return response.data; // List<UserMinimalResponseDto>\n  }\n};","map":{"version":3,"names":["$api","UserAPI","getUserById","userId","response","get","data","updateUser","userData","avatarFile","formData","FormData","append","Blob","JSON","stringify","type","patch","searchUsers","query"],"sources":["/home/alexey/Documents/source/java/SocialNetwork/communify_frontend/src/api/userApi.js"],"sourcesContent":["import $api from \"../http\";\n\nexport const UserAPI = {\n    getUserById: async (userId) => {\n        const response = await $api.get(`/users/${userId}`);\n        return response.data; // UserResponseDto\n    },\n\n    updateUser: async (userId, userData, avatarFile) => {\n        const formData = new FormData();\n        formData.append('user', new Blob([JSON.stringify(userData)], { type: 'application/json' }));\n        if (avatarFile) {\n            formData.append('avatar', avatarFile);\n        }\n        // Axios сам установит Content-Type: multipart/form-data\n        const response = await $api.patch(`/users/${userId}`, formData);\n        return response.data; // UserResponseDto\n    },\n\n    // Если есть поиск пользователей\n    searchUsers: async (query) => {\n        const response = await $api.get(`/users/search?query=${query}`);\n        return response.data; // List<UserMinimalResponseDto>\n    }\n};"],"mappings":"AAAA,OAAOA,IAAI,MAAM,SAAS;AAE1B,OAAO,MAAMC,OAAO,GAAG;EACnBC,WAAW,EAAE,MAAOC,MAAM,IAAK;IAC3B,MAAMC,QAAQ,GAAG,MAAMJ,IAAI,CAACK,GAAG,CAAC,UAAUF,MAAM,EAAE,CAAC;IACnD,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDC,UAAU,EAAE,MAAAA,CAAOJ,MAAM,EAAEK,QAAQ,EAAEC,UAAU,KAAK;IAChD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAIC,IAAI,CAAC,CAACC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAAC,CAAC,EAAE;MAAEQ,IAAI,EAAE;IAAmB,CAAC,CAAC,CAAC;IAC3F,IAAIP,UAAU,EAAE;MACZC,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEH,UAAU,CAAC;IACzC;IACA;IACA,MAAML,QAAQ,GAAG,MAAMJ,IAAI,CAACiB,KAAK,CAAC,UAAUd,MAAM,EAAE,EAAEO,QAAQ,CAAC;IAC/D,OAAON,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAED;EACAY,WAAW,EAAE,MAAOC,KAAK,IAAK;IAC1B,MAAMf,QAAQ,GAAG,MAAMJ,IAAI,CAACK,GAAG,CAAC,uBAAuBc,KAAK,EAAE,CAAC;IAC/D,OAAOf,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}