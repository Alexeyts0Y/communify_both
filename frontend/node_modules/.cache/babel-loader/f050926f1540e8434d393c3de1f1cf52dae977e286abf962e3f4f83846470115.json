{"ast":null,"code":"import { makeAutoObservable, runInAction } from \"mobx\";\nimport { FriendsAPI } from \"../api/friendApi\";\nexport class FriendStore {\n  constructor(rootStore) {\n    this._myFriends = [];\n    // UserMinimalResponseDto[] - друзья текущего пользователя\n    this._userFriends = [];\n    // UserMinimalResponseDto[] - друзья просматриваемого пользователя\n    this._receivedRequests = [];\n    // FriendResponseDto[] - входящие заявки (где friend это 'me')\n    this._sentRequests = [];\n    // FriendResponseDto[] - исходящие заявки (где user это 'me')\n    this._recommendedFriends = [];\n    // UserMinimalResponseDto[]\n    this._loading = false;\n    this._error = null;\n    // rootStore для доступа к UserStore.userId\n    makeAutoObservable(this);\n    this.rootStore = rootStore;\n    // Инициализационные данные (если нужны при старте)\n    // this.fetchMyFriends();\n    // this.fetchReceivedRequests();\n  }\n  setLoading(bool) {\n    this._loading = bool;\n  }\n  setError(error) {\n    this._error = error;\n  }\n\n  // Getters\n  get myFriends() {\n    return this._myFriends;\n  }\n  get userFriends() {\n    return this._userFriends;\n  }\n  get receivedRequests() {\n    return this._receivedRequests;\n  } // Для отображения нужно user из FriendResponseDto\n  get sentRequests() {\n    return this._sentRequests;\n  } // Для отображения нужно friend из FriendResponseDto\n  get recommendedFriends() {\n    return this._recommendedFriends;\n  }\n  get loading() {\n    return this._loading;\n  }\n  get error() {\n    return this._error;\n  }\n  async fetchMyFriends() {\n    if (!this.rootStore.userStore.userId) return;\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      // API может требовать 'me' или конкретный ID\n      const friends = await FriendsAPI.getFriends('me');\n      runInAction(() => {\n        this._myFriends = friends;\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response, _e$response$data;\n        return this.setError(((_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.message) || \"Failed to fetch friends\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async fetchUserFriends(userId) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const friends = await FriendsAPI.getFriends(userId);\n      runInAction(() => {\n        this._userFriends = friends;\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response2, _e$response2$data;\n        return this.setError(((_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.message) || \"Failed to fetch user friends\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async fetchReceivedRequests() {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const requests = await FriendsAPI.getRecievedRequests(); // Проверь опечатку recieved -> received в API\n      runInAction(() => {\n        this._receivedRequests = requests;\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response3, _e$response3$data;\n        return this.setError(((_e$response3 = e.response) === null || _e$response3 === void 0 ? void 0 : (_e$response3$data = _e$response3.data) === null || _e$response3$data === void 0 ? void 0 : _e$response3$data.message) || \"Failed to fetch received requests\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async fetchSentRequests() {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const requests = await FriendsAPI.getSentRequests();\n      runInAction(() => {\n        this._sentRequests = requests;\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response4, _e$response4$data;\n        return this.setError(((_e$response4 = e.response) === null || _e$response4 === void 0 ? void 0 : (_e$response4$data = _e$response4.data) === null || _e$response4$data === void 0 ? void 0 : _e$response4$data.message) || \"Failed to fetch sent requests\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async sendFriendRequest(recipientUserId) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      await FriendsAPI.sendRequest(recipientUserId);\n      // Обновить список отправленных запросов или просто показать уведомление\n      this.fetchSentRequests(); // Обновляем для актуальности\n    } catch (e) {\n      runInAction(() => {\n        var _e$response5, _e$response5$data;\n        return this.setError(((_e$response5 = e.response) === null || _e$response5 === void 0 ? void 0 : (_e$response5$data = _e$response5.data) === null || _e$response5$data === void 0 ? void 0 : _e$response5$data.message) || \"Failed to send request\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async acceptFriendRequest(requestId) {\n    // requestId - это ID из FriendResponseDto\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      await FriendsAPI.acceptRequest(requestId);\n      runInAction(() => {\n        this._receivedRequests = this._receivedRequests.filter(req => req.id !== requestId);\n        // Можно также обновить список друзей\n        this.fetchMyFriends();\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response6, _e$response6$data;\n        return this.setError(((_e$response6 = e.response) === null || _e$response6 === void 0 ? void 0 : (_e$response6$data = _e$response6.data) === null || _e$response6$data === void 0 ? void 0 : _e$response6$data.message) || \"Failed to accept request\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async rejectFriendRequest(requestId) {\n    // requestId - это ID из FriendResponseDto\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      await FriendsAPI.rejectRequest(requestId);\n      runInAction(() => {\n        this._receivedRequests = this._receivedRequests.filter(req => req.id !== requestId);\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response7, _e$response7$data;\n        return this.setError(((_e$response7 = e.response) === null || _e$response7 === void 0 ? void 0 : (_e$response7$data = _e$response7.data) === null || _e$response7$data === void 0 ? void 0 : _e$response7$data.message) || \"Failed to reject request\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async removeFriend(friendId) {\n    // friendId - ID пользователя, которого удаляем из друзей\n    if (!this.rootStore.userStore.userId) return;\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      await FriendsAPI.removeFriend(this.rootStore.userStore.userId, friendId); // или просто friendId если /me/..\n      runInAction(() => {\n        this._myFriends = this._myFriends.filter(friend => friend.id !== friendId);\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response8, _e$response8$data;\n        return this.setError(((_e$response8 = e.response) === null || _e$response8 === void 0 ? void 0 : (_e$response8$data = _e$response8.data) === null || _e$response8$data === void 0 ? void 0 : _e$response8$data.message) || \"Failed to remove friend\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async cancelSentRequest(requestId) {\n    // requestId - это ID из FriendResponseDto\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      // Используем rejectRequest или отдельный cancelSentRequest эндпоинт\n      await FriendsAPI.rejectRequest(requestId); // или FriendsAPI.cancelSentRequest(requestId)\n      runInAction(() => {\n        this._sentRequests = this._sentRequests.filter(req => req.id !== requestId);\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response9, _e$response9$data;\n        return this.setError(((_e$response9 = e.response) === null || _e$response9 === void 0 ? void 0 : (_e$response9$data = _e$response9.data) === null || _e$response9$data === void 0 ? void 0 : _e$response9$data.message) || \"Failed to cancel request\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async fetchRecommendedFriends() {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      // Предположим, есть API для этого, например /users/me/recommendations/friends\n      // const friends = await FriendsAPI.getRecommended();\n      // runInAction(() => {\n      //     this._recommendedFriends = friends;\n      // });\n      console.warn(\"fetchRecommendedFriends: API endpoint not specified, using mock data.\");\n      runInAction(() => {\n        // Mock data as example\n        this._recommendedFriends = [{\n          id: 101,\n          firstName: 'Rec',\n          lastName: 'One',\n          avatarUrl: '/default-avatar.png'\n        }, {\n          id: 102,\n          firstName: 'Rec',\n          lastName: 'Two',\n          avatarUrl: '/default-avatar.png'\n        }];\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response10, _e$response10$data;\n        return this.setError(((_e$response10 = e.response) === null || _e$response10 === void 0 ? void 0 : (_e$response10$data = _e$response10.data) === null || _e$response10$data === void 0 ? void 0 : _e$response10$data.message) || \"Failed to fetch recommended friends\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n}","map":{"version":3,"names":["makeAutoObservable","runInAction","FriendsAPI","FriendStore","constructor","rootStore","_myFriends","_userFriends","_receivedRequests","_sentRequests","_recommendedFriends","_loading","_error","setLoading","bool","setError","error","myFriends","userFriends","receivedRequests","sentRequests","recommendedFriends","loading","fetchMyFriends","userStore","userId","friends","getFriends","e","_e$response","_e$response$data","response","data","message","console","fetchUserFriends","_e$response2","_e$response2$data","fetchReceivedRequests","requests","getRecievedRequests","_e$response3","_e$response3$data","fetchSentRequests","getSentRequests","_e$response4","_e$response4$data","sendFriendRequest","recipientUserId","sendRequest","_e$response5","_e$response5$data","acceptFriendRequest","requestId","acceptRequest","filter","req","id","_e$response6","_e$response6$data","rejectFriendRequest","rejectRequest","_e$response7","_e$response7$data","removeFriend","friendId","friend","_e$response8","_e$response8$data","cancelSentRequest","_e$response9","_e$response9$data","fetchRecommendedFriends","warn","firstName","lastName","avatarUrl","_e$response10","_e$response10$data"],"sources":["/home/alexey/Documents/source/java/SocialNetwork/communify_frontend/src/storage/FriendStore.js"],"sourcesContent":["import { makeAutoObservable, runInAction } from \"mobx\";\nimport { FriendsAPI } from \"../api/friendApi\";\n\nexport class FriendStore {\n    _myFriends = []; // UserMinimalResponseDto[] - друзья текущего пользователя\n    _userFriends = []; // UserMinimalResponseDto[] - друзья просматриваемого пользователя\n    _receivedRequests = []; // FriendResponseDto[] - входящие заявки (где friend это 'me')\n    _sentRequests = []; // FriendResponseDto[] - исходящие заявки (где user это 'me')\n    _recommendedFriends = []; // UserMinimalResponseDto[]\n    _loading = false;\n    _error = null;\n\n    constructor(rootStore) { // rootStore для доступа к UserStore.userId\n        makeAutoObservable(this);\n        this.rootStore = rootStore;\n        // Инициализационные данные (если нужны при старте)\n        // this.fetchMyFriends();\n        // this.fetchReceivedRequests();\n    }\n\n    setLoading(bool) { this._loading = bool; }\n    setError(error) { this._error = error; }\n\n    // Getters\n    get myFriends() { return this._myFriends; }\n    get userFriends() { return this._userFriends; }\n    get receivedRequests() { return this._receivedRequests; } // Для отображения нужно user из FriendResponseDto\n    get sentRequests() { return this._sentRequests; }     // Для отображения нужно friend из FriendResponseDto\n    get recommendedFriends() { return this._recommendedFriends; }\n    get loading() { return this._loading; }\n    get error() { return this._error; }\n\n\n    async fetchMyFriends() {\n        if (!this.rootStore.userStore.userId) return;\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            // API может требовать 'me' или конкретный ID\n            const friends = await FriendsAPI.getFriends('me');\n            runInAction(() => {\n                this._myFriends = friends;\n            });\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to fetch friends\"));\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async fetchUserFriends(userId) {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const friends = await FriendsAPI.getFriends(userId);\n            runInAction(() => {\n                this._userFriends = friends;\n            });\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to fetch user friends\"));\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async fetchReceivedRequests() {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const requests = await FriendsAPI.getRecievedRequests(); // Проверь опечатку recieved -> received в API\n            runInAction(() => {\n                this._receivedRequests = requests;\n            });\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to fetch received requests\"));\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async fetchSentRequests() {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const requests = await FriendsAPI.getSentRequests();\n            runInAction(() => {\n                this._sentRequests = requests;\n            });\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to fetch sent requests\"));\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async sendFriendRequest(recipientUserId) {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            await FriendsAPI.sendRequest(recipientUserId);\n            // Обновить список отправленных запросов или просто показать уведомление\n            this.fetchSentRequests(); // Обновляем для актуальности\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to send request\"));\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async acceptFriendRequest(requestId) { // requestId - это ID из FriendResponseDto\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            await FriendsAPI.acceptRequest(requestId);\n            runInAction(() => {\n                this._receivedRequests = this._receivedRequests.filter(req => req.id !== requestId);\n                // Можно также обновить список друзей\n                this.fetchMyFriends();\n            });\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to accept request\"));\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async rejectFriendRequest(requestId) { // requestId - это ID из FriendResponseDto\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            await FriendsAPI.rejectRequest(requestId);\n            runInAction(() => {\n                this._receivedRequests = this._receivedRequests.filter(req => req.id !== requestId);\n            });\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to reject request\"));\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async removeFriend(friendId) { // friendId - ID пользователя, которого удаляем из друзей\n        if (!this.rootStore.userStore.userId) return;\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            await FriendsAPI.removeFriend(this.rootStore.userStore.userId, friendId); // или просто friendId если /me/..\n            runInAction(() => {\n                this._myFriends = this._myFriends.filter(friend => friend.id !== friendId);\n            });\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to remove friend\"));\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async cancelSentRequest(requestId) { // requestId - это ID из FriendResponseDto\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            // Используем rejectRequest или отдельный cancelSentRequest эндпоинт\n            await FriendsAPI.rejectRequest(requestId); // или FriendsAPI.cancelSentRequest(requestId)\n            runInAction(() => {\n                this._sentRequests = this._sentRequests.filter(req => req.id !== requestId);\n            });\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to cancel request\"));\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async fetchRecommendedFriends() {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            // Предположим, есть API для этого, например /users/me/recommendations/friends\n            // const friends = await FriendsAPI.getRecommended();\n            // runInAction(() => {\n            //     this._recommendedFriends = friends;\n            // });\n            console.warn(\"fetchRecommendedFriends: API endpoint not specified, using mock data.\");\n             runInAction(() => { // Mock data as example\n                this._recommendedFriends = [\n                    {id: 101, firstName: 'Rec', lastName: 'One', avatarUrl: '/default-avatar.png'},\n                    {id: 102, firstName: 'Rec', lastName: 'Two', avatarUrl: '/default-avatar.png'}\n                ];\n            });\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to fetch recommended friends\"));\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}