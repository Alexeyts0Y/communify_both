{"ast":null,"code":"import { makeAutoObservable, runInAction } from \"mobx\";\nimport { GroupAPI } from \"../api/groupApi\";\nexport class GroupStore {\n  constructor(rootStore) {\n    this._userGroups = [];\n    this._currentGroupDetails = null;\n    this._recommendedGroups = [];\n    this._loading = false;\n    this._error = null;\n    makeAutoObservable(this);\n    this.rootStore = rootStore;\n  }\n  setLoading(bool) {\n    this._loading = bool;\n  }\n  setError(error) {\n    this._error = error;\n  }\n  get userGroups() {\n    return this._userGroups;\n  }\n  get currentGroupDetails() {\n    return this._currentGroupDetails;\n  }\n  get currentGroupPosts() {\n    var _this$_currentGroupDe;\n    return ((_this$_currentGroupDe = this._currentGroupDetails) === null || _this$_currentGroupDe === void 0 ? void 0 : _this$_currentGroupDe.posts) || [];\n  }\n  get currentGroupMembers() {\n    var _this$_currentGroupDe2;\n    return ((_this$_currentGroupDe2 = this._currentGroupDetails) === null || _this$_currentGroupDe2 === void 0 ? void 0 : _this$_currentGroupDe2.members) || [];\n  }\n  get recommendedGroups() {\n    return this._recommendedGroups;\n  }\n  get loading() {\n    return this._loading;\n  }\n  get error() {\n    return this._error;\n  }\n  async fetchUserGroups() {\n    const userId = this.rootStore.userStore.userId;\n    if (!userId) return;\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      // Предполагается, что API вернет группы для 'me' или конкретного ID\n      const groups = await GroupAPI.getUserGroups('me');\n      runInAction(() => {\n        this._userGroups = groups;\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response, _e$response$data;\n        return this.setError(((_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.message) || \"Failed to fetch user groups\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async fetchGroupDetails(groupId) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const groupDetails = await GroupAPI.getGroupById(groupId);\n      runInAction(() => {\n        this._currentGroupDetails = groupDetails;\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response2, _e$response2$data;\n        this.setError(((_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.message) || \"Failed to fetch group details\");\n        this._currentGroupDetails = null; // Очищаем в случае ошибки\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async createGroup(groupName, description, imageFile) {\n    const userId = this.rootStore.userStore.userId;\n    if (!userId) {\n      this.setError(\"User not authenticated\");\n      return null;\n    }\n    const groupData = {\n      name: groupName,\n      description: description,\n      userId: userId // creatorId\n    };\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const newGroup = await GroupAPI.createGroup(groupData, imageFile);\n      runInAction(() => {\n        this._userGroups.push({\n          // Добавляем в список групп пользователя (упрощенный вариант)\n          id: newGroup.id,\n          name: newGroup.name,\n          imageUrl: newGroup.imageUrl,\n          role: 'ADMIN' // или OWNER, зависит от логики сервера\n        });\n        // Можно также обновить this._currentGroupDetails, если нужно сразу перейти\n      });\n      return newGroup; // Возвращаем созданную группу для редиректа и т.д.\n    } catch (e) {\n      runInAction(() => {\n        var _e$response3, _e$response3$data;\n        return this.setError(((_e$response3 = e.response) === null || _e$response3 === void 0 ? void 0 : (_e$response3$data = _e$response3.data) === null || _e$response3$data === void 0 ? void 0 : _e$response3$data.message) || \"Failed to create group\");\n      });\n      console.error(e);\n      return null;\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async updateGroup(groupId, groupName, description, imageFile, changePhoto) {\n    const groupData = {\n      name: groupName,\n      description: description\n    };\n    // imageFile будет передан отдельно, если changePhoto === true\n\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const updatedGroup = await GroupAPI.updateGroup(groupId, groupData, changePhoto ? imageFile : null);\n      runInAction(() => {\n        this._currentGroupDetails = updatedGroup;\n        // Обновить _userGroups если имя или картинка изменились\n        const index = this._userGroups.findIndex(g => g.id === groupId);\n        if (index !== -1) {\n          this._userGroups[index] = {\n            ...this._userGroups[index],\n            name: updatedGroup.name,\n            imageUrl: updatedGroup.imageUrl\n          };\n        }\n      });\n      return updatedGroup;\n    } catch (e) {\n      runInAction(() => {\n        var _e$response4, _e$response4$data;\n        return this.setError(((_e$response4 = e.response) === null || _e$response4 === void 0 ? void 0 : (_e$response4$data = _e$response4.data) === null || _e$response4$data === void 0 ? void 0 : _e$response4$data.message) || \"Failed to update group\");\n      });\n      console.error(e);\n      return null;\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async joinGroup(groupId) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      await GroupAPI.joinGroup(groupId);\n      runInAction(() => {\n        // Обновить currentGroupDetails (добавить мембера)\n        // Обновить userGroups (добавить группу, если ее там не было)\n        if (this._currentGroupDetails && this._currentGroupDetails.id === groupId) {\n          // Логика добавления текущего пользователя в список members\n          // Это сложнее, так как API может не вернуть обновленный список members\n          // Проще перезапросить fetchGroupDetails\n          this.fetchGroupDetails(groupId);\n        }\n        this.fetchUserGroups(); // Обновить список групп пользователя\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response5, _e$response5$data;\n        return this.setError(((_e$response5 = e.response) === null || _e$response5 === void 0 ? void 0 : (_e$response5$data = _e$response5.data) === null || _e$response5$data === void 0 ? void 0 : _e$response5$data.message) || \"Failed to join group\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async leaveGroup(groupId) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      await GroupAPI.leaveGroup(groupId);\n      runInAction(() => {\n        if (this._currentGroupDetails && this._currentGroupDetails.id === groupId) {\n          this.fetchGroupDetails(groupId); // Обновить\n        }\n        this._userGroups = this._userGroups.filter(g => g.id !== groupId);\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response6, _e$response6$data;\n        return this.setError(((_e$response6 = e.response) === null || _e$response6 === void 0 ? void 0 : (_e$response6$data = _e$response6.data) === null || _e$response6$data === void 0 ? void 0 : _e$response6$data.message) || \"Failed to leave group\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async fetchRecommendedGroups() {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const groups = await GroupAPI.getInterestingGroups();\n      runInAction(() => {\n        this._recommendedGroups = groups;\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response7, _e$response7$data;\n        // Mock data as example\n        this.setError(((_e$response7 = e.response) === null || _e$response7 === void 0 ? void 0 : (_e$response7$data = _e$response7.data) === null || _e$response7$data === void 0 ? void 0 : _e$response7$data.message) || \"Failed to fetch recommended groups\");\n        console.error(e);\n      });\n      console.warn(\"fetchRecommendedGroups: API endpoint might not exist or failed, using mock. \", e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n}","map":{"version":3,"names":["makeAutoObservable","runInAction","GroupAPI","GroupStore","constructor","rootStore","_userGroups","_currentGroupDetails","_recommendedGroups","_loading","_error","setLoading","bool","setError","error","userGroups","currentGroupDetails","currentGroupPosts","_this$_currentGroupDe","posts","currentGroupMembers","_this$_currentGroupDe2","members","recommendedGroups","loading","fetchUserGroups","userId","userStore","groups","getUserGroups","e","_e$response","_e$response$data","response","data","message","console","fetchGroupDetails","groupId","groupDetails","getGroupById","_e$response2","_e$response2$data","createGroup","groupName","description","imageFile","groupData","name","newGroup","push","id","imageUrl","role","_e$response3","_e$response3$data","updateGroup","changePhoto","updatedGroup","index","findIndex","g","_e$response4","_e$response4$data","joinGroup","_e$response5","_e$response5$data","leaveGroup","filter","_e$response6","_e$response6$data","fetchRecommendedGroups","getInterestingGroups","_e$response7","_e$response7$data","warn"],"sources":["/home/alexey/Documents/source/java/SocialNetwork/communify_frontend/src/storage/GroupStore.js"],"sourcesContent":["import { makeAutoObservable, runInAction } from \"mobx\";\nimport { GroupAPI } from \"../api/groupApi\";\n\nexport class GroupStore {\n    _userGroups = [];\n    _currentGroupDetails = null; \n    _recommendedGroups = [];\n    _loading = false;\n    _error = null;\n\n    constructor(rootStore) {\n        makeAutoObservable(this);\n        this.rootStore = rootStore;\n    }\n\n    setLoading(bool) { this._loading = bool; }\n    setError(error) { this._error = error; }\n\n    get userGroups() { return this._userGroups; }\n    get currentGroupDetails() { return this._currentGroupDetails; }\n    get currentGroupPosts() { return this._currentGroupDetails?.posts || []; }\n    get currentGroupMembers() { return this._currentGroupDetails?.members || []; }\n    get recommendedGroups() { return this._recommendedGroups; }\n    get loading() { return this._loading; }\n    get error() { return this._error; }\n\n    async fetchUserGroups() {\n        const userId = this.rootStore.userStore.userId;\n        if (!userId) return;\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            // Предполагается, что API вернет группы для 'me' или конкретного ID\n            const groups = await GroupAPI.getUserGroups('me');\n            runInAction(() => {\n                this._userGroups = groups;\n            });\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to fetch user groups\"));\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async fetchGroupDetails(groupId) {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const groupDetails = await GroupAPI.getGroupById(groupId);\n            runInAction(() => {\n                this._currentGroupDetails = groupDetails;\n            });\n        } catch (e) {\n            runInAction(() => {\n                this.setError(e.response?.data?.message || \"Failed to fetch group details\");\n                this._currentGroupDetails = null; // Очищаем в случае ошибки\n            });\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async createGroup(groupName, description, imageFile) {\n        const userId = this.rootStore.userStore.userId;\n        if (!userId) {\n            this.setError(\"User not authenticated\");\n            return null;\n        }\n        const groupData = {\n            name: groupName,\n            description: description,\n            userId: userId // creatorId\n        };\n\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const newGroup = await GroupAPI.createGroup(groupData, imageFile);\n            runInAction(() => {\n                this._userGroups.push({ // Добавляем в список групп пользователя (упрощенный вариант)\n                    id: newGroup.id,\n                    name: newGroup.name,\n                    imageUrl: newGroup.imageUrl,\n                    role: 'ADMIN' // или OWNER, зависит от логики сервера\n                });\n                // Можно также обновить this._currentGroupDetails, если нужно сразу перейти\n            });\n            return newGroup; // Возвращаем созданную группу для редиректа и т.д.\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to create group\"));\n            console.error(e);\n            return null;\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async updateGroup(groupId, groupName, description, imageFile, changePhoto) {\n        const groupData = {\n            name: groupName,\n            description: description,\n        };\n        // imageFile будет передан отдельно, если changePhoto === true\n\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const updatedGroup = await GroupAPI.updateGroup(groupId, groupData, changePhoto ? imageFile : null);\n            runInAction(() => {\n                this._currentGroupDetails = updatedGroup;\n                // Обновить _userGroups если имя или картинка изменились\n                const index = this._userGroups.findIndex(g => g.id === groupId);\n                if (index !== -1) {\n                    this._userGroups[index] = {\n                        ...this._userGroups[index],\n                        name: updatedGroup.name,\n                        imageUrl: updatedGroup.imageUrl,\n                    };\n                }\n            });\n            return updatedGroup;\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to update group\"));\n            console.error(e);\n            return null;\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n    \n    async joinGroup(groupId) {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            await GroupAPI.joinGroup(groupId);\n            runInAction(() => {\n                // Обновить currentGroupDetails (добавить мембера)\n                // Обновить userGroups (добавить группу, если ее там не было)\n                if (this._currentGroupDetails && this._currentGroupDetails.id === groupId) {\n                    // Логика добавления текущего пользователя в список members\n                    // Это сложнее, так как API может не вернуть обновленный список members\n                    // Проще перезапросить fetchGroupDetails\n                    this.fetchGroupDetails(groupId);\n                }\n                this.fetchUserGroups(); // Обновить список групп пользователя\n            });\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to join group\"));\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async leaveGroup(groupId) {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            await GroupAPI.leaveGroup(groupId);\n             runInAction(() => {\n                if (this._currentGroupDetails && this._currentGroupDetails.id === groupId) {\n                    this.fetchGroupDetails(groupId); // Обновить\n                }\n                this._userGroups = this._userGroups.filter(g => g.id !== groupId);\n            });\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to leave group\"));\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async fetchRecommendedGroups() {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const groups = await GroupAPI.getInterestingGroups();\n            runInAction(() => {\n                this._recommendedGroups = groups;\n            });\n        } catch (e) {\n             runInAction(() => { // Mock data as example\n                this.setError(e.response?.data?.message || \"Failed to fetch recommended groups\")\n                console.error(e);\n            });\n            console.warn(\"fetchRecommendedGroups: API endpoint might not exist or failed, using mock. \", e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}