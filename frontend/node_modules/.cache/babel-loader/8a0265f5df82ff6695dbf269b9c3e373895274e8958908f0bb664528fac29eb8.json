{"ast":null,"code":"var _jsxFileName = \"/home/alexey/Documents/source/java/SocialNetwork/communify_frontend/src/pages/Friends/Friends.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { Context } from '../..';\nimport classes from './Friends.module.css';\nimport FriendItem from '../../component/FriendItem/FriendItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Friends = () => {\n  _s();\n  const {\n    friendStorage\n  } = useContext(Context);\n  const location = useLocation();\n  const {\n    id\n  } = useParams(); // Для /users/{id}/friends\n\n  // Определяем тип страницы\n  const getPageType = () => {\n    if (id) return 'userFriends'; // Просмотр друзей другого пользователя\n    if (location.pathname.includes('requests/sent')) return 'sentRequests';\n    if (location.pathname.includes('requests/received')) return 'receivedRequests';\n    return 'friends'; // По умолчанию - мои друзья\n  };\n  const pageType = getPageType();\n\n  // Загрузка данных при изменении типа страницы или id пользователя\n  useEffect(() => {\n    switch (pageType) {\n      case 'friends':\n        friendStorage.fetchMyFriends();\n        break;\n      case 'sentRequests':\n        friendStorage.fetchSentRequests();\n        break;\n      case 'receivedRequests':\n        friendStorage.fetchReceivedRequests();\n        break;\n      case 'userFriends':\n        friendStorage.fetchUserFriends(id);\n        break;\n    }\n  }, [pageType, id]);\n\n  // Обработчики действий\n  const handleAction = (action, friendId) => {\n    switch (action) {\n      case 'remove':\n        friendStorage.removeFriend(friendId);\n        break;\n      case 'cancel':\n        friendStorage.cancelRequest(friendId);\n        break;\n      case 'accept':\n        friendStorage.acceptRequest(friendId);\n        break;\n      case 'reject':\n        friendStorage.rejectRequest(friendId);\n        break;\n    }\n  };\n\n  // Получаем нужный список пользователей\n  const getUsers = () => {\n    switch (pageType) {\n      case 'friends':\n        return friendStorage.myFriends;\n      case 'sentRequests':\n        return friendStorage.sentRequests;\n      case 'receivedRequests':\n        return friendStorage.receivedRequests;\n      case 'userFriends':\n        return friendStorage.userFriends;\n      default:\n        return [];\n    }\n  };\n  const users = getUsers();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: classes.title,\n      children: [pageType === 'friends' && 'Мои друзья', pageType === 'sentRequests' && 'Отправленные заявки', pageType === 'receivedRequests' && 'Полученные заявки', pageType === 'userFriends' && `Друзья пользователя`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.usersList,\n      children: users.map(user => /*#__PURE__*/_jsxDEV(FriendItem, {\n        user: user,\n        pageType: pageType,\n        onAction: handleAction\n      }, user.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(Friends, \"jm4KG/HmVo0T2/Mka01gOIw30q8=\", false, function () {\n  return [useLocation, useParams];\n});\n_c = Friends;\nexport default Friends;\nvar _c;\n$RefreshReg$(_c, \"Friends\");","map":{"version":3,"names":["React","useContext","useEffect","useLocation","useParams","Context","classes","FriendItem","jsxDEV","_jsxDEV","Friends","_s","friendStorage","location","id","getPageType","pathname","includes","pageType","fetchMyFriends","fetchSentRequests","fetchReceivedRequests","fetchUserFriends","handleAction","action","friendId","removeFriend","cancelRequest","acceptRequest","rejectRequest","getUsers","myFriends","sentRequests","receivedRequests","userFriends","users","className","container","children","title","fileName","_jsxFileName","lineNumber","columnNumber","usersList","map","user","onAction","_c","$RefreshReg$"],"sources":["/home/alexey/Documents/source/java/SocialNetwork/communify_frontend/src/pages/Friends/Friends.jsx"],"sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { Context } from '../..';\n\nimport classes from './Friends.module.css';\n\nimport FriendItem from '../../component/FriendItem/FriendItem';\n\nconst Friends = () => {\n    const { friendStorage } = useContext(Context);\n    const location = useLocation();\n    const { id } = useParams(); // Для /users/{id}/friends\n    \n    // Определяем тип страницы\n    const getPageType = () => {\n        if (id) return 'userFriends'; // Просмотр друзей другого пользователя\n        if (location.pathname.includes('requests/sent')) return 'sentRequests';\n        if (location.pathname.includes('requests/received')) return 'receivedRequests';\n        return 'friends'; // По умолчанию - мои друзья\n    };\n    \n    const pageType = getPageType();\n    \n    // Загрузка данных при изменении типа страницы или id пользователя\n    useEffect(() => {\n        switch(pageType) {\n            case 'friends':\n                friendStorage.fetchMyFriends();\n                break;\n            case 'sentRequests':\n                friendStorage.fetchSentRequests();\n                break;\n            case 'receivedRequests':\n                friendStorage.fetchReceivedRequests();\n                break;\n            case 'userFriends':\n                friendStorage.fetchUserFriends(id);\n                break;\n        }\n    }, [pageType, id]);\n    \n    // Обработчики действий\n    const handleAction = (action, friendId) => {\n        switch(action) {\n            case 'remove':\n                friendStorage.removeFriend(friendId);\n                break;\n            case 'cancel':\n                friendStorage.cancelRequest(friendId);\n                break;\n            case 'accept':\n                friendStorage.acceptRequest(friendId);\n                break;\n            case 'reject':\n                friendStorage.rejectRequest(friendId);\n                break;\n        }\n    };\n    \n    // Получаем нужный список пользователей\n    const getUsers = () => {\n        switch(pageType) {\n            case 'friends': return friendStorage.myFriends;\n            case 'sentRequests': return friendStorage.sentRequests;\n            case 'receivedRequests': return friendStorage.receivedRequests;\n            case 'userFriends': return friendStorage.userFriends;\n            default: return [];\n        }\n    };\n    \n    const users = getUsers();\n    \n    return (\n        <div className={classes.container}>\n            <h1 className={classes.title}>\n                {pageType === 'friends' && 'Мои друзья'}\n                {pageType === 'sentRequests' && 'Отправленные заявки'}\n                {pageType === 'receivedRequests' && 'Полученные заявки'}\n                {pageType === 'userFriends' && `Друзья пользователя`}\n            </h1>\n            \n            <div className={classes.usersList}>\n                {users.map(user => (\n                    <FriendItem \n                        key={user.id}\n                        user={user}\n                        pageType={pageType}\n                        onAction={handleAction}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Friends;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}