{"ast":null,"code":"var _jsxFileName = \"/home/alexey/Documents/source/java/SocialNetwork/communify_frontend/src/component/AppRouter.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { Context } from '../storage'; // Убедитесь, что путь правильный\nimport { authRoutes, publicRoutes } from '../routes';\nimport { ROUTE } from '../utils/consts';\nimport Header from './Header/Header'; // Если Header общий для всех страниц\nimport MainLayout from './layouts/MainLayout'; // Пример лейаута\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AppRouter = _s(observer(_c = _s(() => {\n  _s();\n  const {\n    userStore\n  } = useContext(Context);\n  const isAuth = userStore.isAuth;\n\n  // Можно сделать более сложную логику для лейаутов\n  // Например, некоторые страницы без Header/Sidebar (Login, Register)\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [isAuth && authRoutes.map(({\n        path,\n        Component\n      }) =>\n      /*#__PURE__*/\n      // Обертка в MainLayout для страниц, которым нужен сайдбар и т.д.\n      _jsxDEV(Route, {\n        path: path,\n        element: /*#__PURE__*/_jsxDEV(MainLayout, {\n          children: /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 72\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 60\n        }, this)\n      }, path, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 21\n      }, this)), publicRoutes.map(({\n        path,\n        Component\n      }) =>\n      // Обертка в MainLayout для публичных страниц, которым нужен сайдбар (например, Feed, Profile другого юзера)\n      // Для Login/Register лейаут может быть другим или отсутствовать\n      path === ROUTE.LOGIN || path === ROUTE.REGISTER ? /*#__PURE__*/_jsxDEV(Route, {\n        path: path,\n        element: /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 64\n        }, this)\n      }, path, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(Route, {\n        path: path,\n        element: /*#__PURE__*/_jsxDEV(MainLayout, {\n          children: /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 76\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 64\n        }, this)\n      }, path, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Navigate, {\n          to: ROUTE.FEED,\n          replace: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        element: /*#__PURE__*/_jsxDEV(Navigate, {\n          to: ROUTE.NOT_FOUND,\n          replace: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}, \"ILDoct/SgorDmgybrGLACb4NAtc=\")), \"ILDoct/SgorDmgybrGLACb4NAtc=\");\n_c2 = AppRouter;\nexport default AppRouter;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppRouter$observer\");\n$RefreshReg$(_c2, \"AppRouter\");","map":{"version":3,"names":["React","useContext","Routes","Route","Navigate","observer","Context","authRoutes","publicRoutes","ROUTE","Header","MainLayout","jsxDEV","_jsxDEV","Fragment","_Fragment","AppRouter","_s","_c","userStore","isAuth","children","map","path","Component","element","fileName","_jsxFileName","lineNumber","columnNumber","LOGIN","REGISTER","to","FEED","replace","NOT_FOUND","_c2","$RefreshReg$"],"sources":["/home/alexey/Documents/source/java/SocialNetwork/communify_frontend/src/component/AppRouter.jsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { Context } from '../storage'; // Убедитесь, что путь правильный\nimport { authRoutes, publicRoutes } from '../routes';\nimport { ROUTE } from '../utils/consts';\nimport Header from './Header/Header'; // Если Header общий для всех страниц\nimport MainLayout from './layouts/MainLayout'; // Пример лейаута\n\nconst AppRouter = observer(() => {\n    const { userStore } = useContext(Context);\n    const isAuth = userStore.isAuth;\n\n    // Можно сделать более сложную логику для лейаутов\n    // Например, некоторые страницы без Header/Sidebar (Login, Register)\n\n    return (\n        <>\n            {/* <Header /> Отображение Header здесь, если он нужен на всех страницах */}\n            <Routes>\n                {isAuth && authRoutes.map(({ path, Component }) => (\n                    // Обертка в MainLayout для страниц, которым нужен сайдбар и т.д.\n                    <Route key={path} path={path} element={<MainLayout><Component /></MainLayout>} />\n                ))}\n                {publicRoutes.map(({ path, Component }) => (\n                     // Обертка в MainLayout для публичных страниц, которым нужен сайдбар (например, Feed, Profile другого юзера)\n                     // Для Login/Register лейаут может быть другим или отсутствовать\n                    (path === ROUTE.LOGIN || path === ROUTE.REGISTER) ?\n                        <Route key={path} path={path} element={<Component />} /> :\n                        <Route key={path} path={path} element={<MainLayout><Component /></MainLayout>} />\n                ))}\n                <Route path=\"/\" element={<Navigate to={ROUTE.FEED} replace />} />\n                {/* Если пользователь не авторизован и пытается зайти на защищенный роут, \n                    можно сделать редирект на LOGIN. React Router v6 делает это автоматически, \n                    если такой роут не найден среди publicRoutes и isAuth=false для authRoutes.\n                    Для явного редиректа:\n                    {!isAuth && authRoutes.map(({ path }) => (\n                        <Route key={`redirect-${path}`} path={path} element={<Navigate to={ROUTE.LOGIN} replace />} />\n                    ))}\n                */}\n                <Route path=\"*\" element={<Navigate to={ROUTE.NOT_FOUND} replace />} />\n            </Routes>\n        </>\n    );\n});\n\nexport default AppRouter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}