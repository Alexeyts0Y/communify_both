{"ast":null,"code":"import $api from \"../http\";\nexport const PostAPI = {\n  getLatest: async () => {\n    const response = await $api.get(`/feed`);\n    return response.data; // List<PostResponseDto>\n  },\n  getRecommended: async () => {\n    const response = await $api.get(`/recommendations`);\n    return response.data; // List<PostResponseDto>\n  },\n  createPost: async (postData, imageFile) => {\n    // postData: { content, userId, groupId }\n    const formData = new FormData();\n    formData.append('post', new Blob([JSON.stringify(postData)], {\n      type: 'application/json'\n    }));\n    if (imageFile) {\n      formData.append('image', imageFile);\n    }\n    const response = await $api.post(`/posts/new`, formData);\n    return response.data; // PostResponseDto\n  },\n  deletePost: async postId => {\n    const response = await $api.delete(`/posts/${postId}/delete`);\n    return response.data; // Обычно пустое тело или сообщение об успехе\n  },\n  getPostsByUserId: async userId => {\n    const response = await $api.get(`/users/${userId}/posts`); // Предполагаемый эндпоинт\n    return response.data; // List<PostResponseDto>\n  },\n  getPostsByGroupId: async groupId => {\n    const response = await $api.get(`/groups/${groupId}/posts`); // Предполагаемый эндпоинт\n    return response.data; // List<PostResponseDto>\n  },\n  likePost: async postId => {\n    const response = await $api.post(`/posts/${postId}/like`); // Предполагаемый эндпоинт\n    return response.data; // PostResponseDto (обновленный) или { success: true }\n  },\n  unlikePost: async postId => {\n    const response = await $api.delete(`/posts/${postId}/unlike`); // Предполагаемый эндпоинт\n    return response.data; // PostResponseDto (обновленный) или { success: true }\n  }\n};","map":{"version":3,"names":["$api","PostAPI","getLatest","response","get","data","getRecommended","createPost","postData","imageFile","formData","FormData","append","Blob","JSON","stringify","type","post","deletePost","postId","delete","getPostsByUserId","userId","getPostsByGroupId","groupId","likePost","unlikePost"],"sources":["/home/alexey/Documents/source/java/SocialNetwork/communify_frontend/src/api/postApi.js"],"sourcesContent":["import $api from \"../http\";\n\nexport const PostAPI = {\n    getLatest: async () => {\n        const response = await $api.get(`/feed`);\n        return response.data; // List<PostResponseDto>\n    },\n\n    getRecommended: async () => {\n        const response = await $api.get(`/recommendations`);\n        return response.data; // List<PostResponseDto>\n    },\n\n    createPost: async (postData, imageFile) => { // postData: { content, userId, groupId }\n        const formData = new FormData();\n        formData.append('post', new Blob([JSON.stringify(postData)], { type: 'application/json' }));\n        if (imageFile) {\n            formData.append('image', imageFile);\n        }\n        const response = await $api.post(`/posts/new`, formData);\n        return response.data; // PostResponseDto\n    },\n\n    deletePost: async (postId) => {\n        const response = await $api.delete(`/posts/${postId}/delete`);\n        return response.data; // Обычно пустое тело или сообщение об успехе\n    },\n\n    getPostsByUserId: async (userId) => {\n        const response = await $api.get(`/users/${userId}/posts`); // Предполагаемый эндпоинт\n        return response.data; // List<PostResponseDto>\n    },\n\n    getPostsByGroupId: async (groupId) => {\n        const response = await $api.get(`/groups/${groupId}/posts`); // Предполагаемый эндпоинт\n        return response.data; // List<PostResponseDto>\n    },\n\n    likePost: async (postId) => {\n        const response = await $api.post(`/posts/${postId}/like`); // Предполагаемый эндпоинт\n        return response.data; // PostResponseDto (обновленный) или { success: true }\n    },\n\n    unlikePost: async (postId) => {\n        const response = await $api.delete(`/posts/${postId}/unlike`); // Предполагаемый эндпоинт\n        return response.data; // PostResponseDto (обновленный) или { success: true }\n    }\n};"],"mappings":"AAAA,OAAOA,IAAI,MAAM,SAAS;AAE1B,OAAO,MAAMC,OAAO,GAAG;EACnBC,SAAS,EAAE,MAAAA,CAAA,KAAY;IACnB,MAAMC,QAAQ,GAAG,MAAMH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxC,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDC,cAAc,EAAE,MAAAA,CAAA,KAAY;IACxB,MAAMH,QAAQ,GAAG,MAAMH,IAAI,CAACI,GAAG,CAAC,kBAAkB,CAAC;IACnD,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDE,UAAU,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,SAAS,KAAK;IAAE;IACzC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAIC,IAAI,CAAC,CAACC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAAC,CAAC,EAAE;MAAEQ,IAAI,EAAE;IAAmB,CAAC,CAAC,CAAC;IAC3F,IAAIP,SAAS,EAAE;MACXC,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,SAAS,CAAC;IACvC;IACA,MAAMN,QAAQ,GAAG,MAAMH,IAAI,CAACiB,IAAI,CAAC,YAAY,EAAEP,QAAQ,CAAC;IACxD,OAAOP,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDa,UAAU,EAAE,MAAOC,MAAM,IAAK;IAC1B,MAAMhB,QAAQ,GAAG,MAAMH,IAAI,CAACoB,MAAM,CAAC,UAAUD,MAAM,SAAS,CAAC;IAC7D,OAAOhB,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDgB,gBAAgB,EAAE,MAAOC,MAAM,IAAK;IAChC,MAAMnB,QAAQ,GAAG,MAAMH,IAAI,CAACI,GAAG,CAAC,UAAUkB,MAAM,QAAQ,CAAC,CAAC,CAAC;IAC3D,OAAOnB,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDkB,iBAAiB,EAAE,MAAOC,OAAO,IAAK;IAClC,MAAMrB,QAAQ,GAAG,MAAMH,IAAI,CAACI,GAAG,CAAC,WAAWoB,OAAO,QAAQ,CAAC,CAAC,CAAC;IAC7D,OAAOrB,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDoB,QAAQ,EAAE,MAAON,MAAM,IAAK;IACxB,MAAMhB,QAAQ,GAAG,MAAMH,IAAI,CAACiB,IAAI,CAAC,UAAUE,MAAM,OAAO,CAAC,CAAC,CAAC;IAC3D,OAAOhB,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDqB,UAAU,EAAE,MAAOP,MAAM,IAAK;IAC1B,MAAMhB,QAAQ,GAAG,MAAMH,IAAI,CAACoB,MAAM,CAAC,UAAUD,MAAM,SAAS,CAAC,CAAC,CAAC;IAC/D,OAAOhB,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}