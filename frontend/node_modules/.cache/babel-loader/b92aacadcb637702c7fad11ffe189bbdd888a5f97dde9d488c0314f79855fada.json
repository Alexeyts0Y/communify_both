{"ast":null,"code":"import { makeAutoObservable, runInAction } from \"mobx\";\nimport { PostAPI } from \"../api/postApi\";\nexport class PostStore {\n  constructor(rootStore) {\n    this._feedPosts = [];\n    // Посты для главной ленты (PostResponseDto[])\n    this._userPosts = [];\n    // Посты конкретного пользователя (PostResponseDto[])\n    this._groupPosts = [];\n    // Посты конкретной группы (PostResponseDto[])\n    this._recommendedPosts = [];\n    // Рекомендованные посты (PostResponseDto[])\n    this._currentPost = null;\n    // Текущий просматриваемый пост (PostResponseDto)\n    this._loading = false;\n    this._error = null;\n    makeAutoObservable(this);\n    this.rootStore = rootStore; // Для userId в createPost\n    // this.fetchFeedPosts(); // Начальная загрузка\n  }\n  setLoading(bool) {\n    this._loading = bool;\n  }\n  setError(error) {\n    this._error = error;\n  }\n\n  // Getters\n  get feedPosts() {\n    return this._feedPosts;\n  }\n  get userPosts() {\n    return this._userPosts;\n  }\n  get groupPosts() {\n    return this._groupPosts;\n  }\n  get recommendedPosts() {\n    return this._recommendedPosts;\n  }\n  get currentPost() {\n    return this._currentPost;\n  }\n  get loading() {\n    return this._loading;\n  }\n  get error() {\n    return this._error;\n  }\n  async fetchFeedPosts() {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const posts = await PostAPI.getLatest();\n      runInAction(() => {\n        this._feedPosts = posts.content;\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response, _e$response$data;\n        return this.setError(((_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.message) || \"Failed to fetch feed posts\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async fetchRecommendedPosts() {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const posts = await PostAPI.getRecommended();\n      runInAction(() => {\n        this._recommendedPosts = posts;\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response2, _e$response2$data;\n        return this.setError(((_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.message) || \"Failed to fetch recommended posts\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async fetchUserPosts(userId) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const posts = await PostAPI.getPostsByUserId(userId);\n      runInAction(() => {\n        this._userPosts = posts;\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response3, _e$response3$data;\n        return this.setError(((_e$response3 = e.response) === null || _e$response3 === void 0 ? void 0 : (_e$response3$data = _e$response3.data) === null || _e$response3$data === void 0 ? void 0 : _e$response3$data.message) || \"Failed to fetch user posts\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async fetchGroupPosts(groupId) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const posts = await PostAPI.getPostsByGroupId(groupId);\n      runInAction(() => {\n        this._groupPosts = posts;\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response4, _e$response4$data;\n        return this.setError(((_e$response4 = e.response) === null || _e$response4 === void 0 ? void 0 : (_e$response4$data = _e$response4.data) === null || _e$response4$data === void 0 ? void 0 : _e$response4$data.message) || \"Failed to fetch group posts\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async createPost(postContent, imageFile, groupId = null) {\n    const userId = this.rootStore.userStore.userId;\n    if (!userId) {\n      this.setError(\"User not authenticated\");\n      return false;\n    }\n    const postData = {\n      content: postContent,\n      userId: userId,\n      groupId: groupId\n    };\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      const newPost = await PostAPI.createPost(postData, imageFile);\n      runInAction(() => {\n        this._feedPosts.unshift(newPost); // Добавляем в начало ленты\n        if (groupId) {\n          this._groupPosts.unshift(newPost);\n        } else {\n          this._userPosts.unshift(newPost); // Если это пост пользователя без группы\n        }\n      });\n      return true;\n    } catch (e) {\n      runInAction(() => {\n        var _e$response5, _e$response5$data;\n        return this.setError(((_e$response5 = e.response) === null || _e$response5 === void 0 ? void 0 : (_e$response5$data = _e$response5.data) === null || _e$response5$data === void 0 ? void 0 : _e$response5$data.message) || \"Failed to create post\");\n      });\n      console.error(e);\n      return false;\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  async deletePost(postId) {\n    this.setLoading(true);\n    this.setError(null);\n    try {\n      await PostAPI.deletePost(postId);\n      runInAction(() => {\n        this._feedPosts = this._feedPosts.filter(p => p.id !== postId);\n        this._userPosts = this._userPosts.filter(p => p.id !== postId);\n        this._groupPosts = this._groupPosts.filter(p => p.id !== postId);\n        this._recommendedPosts = this._recommendedPosts.filter(p => p.id !== postId);\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response6, _e$response6$data;\n        return this.setError(((_e$response6 = e.response) === null || _e$response6 === void 0 ? void 0 : (_e$response6$data = _e$response6.data) === null || _e$response6$data === void 0 ? void 0 : _e$response6$data.message) || \"Failed to delete post\");\n      });\n      console.error(e);\n    } finally {\n      runInAction(() => this.setLoading(false));\n    }\n  }\n  _updatePostLike(postId, updatedPostData) {\n    var _this$_currentPost;\n    const update = postsArray => postsArray.map(p => p.id === postId ? {\n      ...p,\n      ...updatedPostData\n    } : p);\n    this._feedPosts = update(this._feedPosts);\n    this._userPosts = update(this._userPosts);\n    this._groupPosts = update(this._groupPosts);\n    this._recommendedPosts = update(this._recommendedPosts);\n    if (((_this$_currentPost = this._currentPost) === null || _this$_currentPost === void 0 ? void 0 : _this$_currentPost.id) === postId) {\n      this._currentPost = {\n        ...this._currentPost,\n        ...updatedPostData\n      };\n    }\n  }\n  async likePost(postId) {\n    // Оптимистичное обновление\n    const originalPosts = {\n      feed: [...this._feedPosts],\n      user: [...this._userPosts],\n      group: [...this._groupPosts],\n      rec: [...this._recommendedPosts]\n    };\n    const postToUpdate = this._feedPosts.find(p => p.id === postId) || this._userPosts.find(p => p.id === postId) || this._groupPosts.find(p => p.id === postId) || this._recommendedPosts.find(p => p.id === postId);\n    if (postToUpdate) {\n      runInAction(() => {\n        this._updatePostLike(postId, {\n          likeCount: postToUpdate.likeCount + 1,\n          likedByCurrentUser: true\n        });\n      });\n    }\n    try {\n      const updatedPost = await PostAPI.likePost(postId); // API должен вернуть обновленный пост\n      runInAction(() => {\n        this._updatePostLike(postId, updatedPost);\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response7, _e$response7$data;\n        // Откат в случае ошибки\n        this.setError(((_e$response7 = e.response) === null || _e$response7 === void 0 ? void 0 : (_e$response7$data = _e$response7.data) === null || _e$response7$data === void 0 ? void 0 : _e$response7$data.message) || \"Failed to like post\");\n        this._feedPosts = originalPosts.feed;\n        this._userPosts = originalPosts.user;\n        this._groupPosts = originalPosts.group;\n        this._recommendedPosts = originalPosts.rec;\n        // Восстановить _currentPost если нужно\n      });\n      console.error(e);\n    }\n  }\n  async unlikePost(postId) {\n    const originalPosts = {\n      feed: [...this._feedPosts],\n      user: [...this._userPosts],\n      group: [...this._groupPosts],\n      rec: [...this._recommendedPosts]\n    };\n    const postToUpdate = this._feedPosts.find(p => p.id === postId) || this._userPosts.find(p => p.id === postId) || this._groupPosts.find(p => p.id === postId) || this._recommendedPosts.find(p => p.id === postId);\n    if (postToUpdate) {\n      runInAction(() => {\n        this._updatePostLike(postId, {\n          likeCount: postToUpdate.likeCount - 1,\n          likedByCurrentUser: false\n        });\n      });\n    }\n    try {\n      const updatedPost = await PostAPI.unlikePost(postId);\n      runInAction(() => {\n        this._updatePostLike(postId, updatedPost);\n      });\n    } catch (e) {\n      runInAction(() => {\n        var _e$response8, _e$response8$data;\n        // Откат\n        this.setError(((_e$response8 = e.response) === null || _e$response8 === void 0 ? void 0 : (_e$response8$data = _e$response8.data) === null || _e$response8$data === void 0 ? void 0 : _e$response8$data.message) || \"Failed to unlike post\");\n        this._feedPosts = originalPosts.feed;\n        this._userPosts = originalPosts.user;\n        this._groupPosts = originalPosts.group;\n        this._recommendedPosts = originalPosts.rec;\n      });\n      console.error(e);\n    }\n  }\n}","map":{"version":3,"names":["makeAutoObservable","runInAction","PostAPI","PostStore","constructor","rootStore","_feedPosts","_userPosts","_groupPosts","_recommendedPosts","_currentPost","_loading","_error","setLoading","bool","setError","error","feedPosts","userPosts","groupPosts","recommendedPosts","currentPost","loading","fetchFeedPosts","posts","getLatest","content","e","_e$response","_e$response$data","response","data","message","console","fetchRecommendedPosts","getRecommended","_e$response2","_e$response2$data","fetchUserPosts","userId","getPostsByUserId","_e$response3","_e$response3$data","fetchGroupPosts","groupId","getPostsByGroupId","_e$response4","_e$response4$data","createPost","postContent","imageFile","userStore","postData","newPost","unshift","_e$response5","_e$response5$data","deletePost","postId","filter","p","id","_e$response6","_e$response6$data","_updatePostLike","updatedPostData","_this$_currentPost","update","postsArray","map","likePost","originalPosts","feed","user","group","rec","postToUpdate","find","likeCount","likedByCurrentUser","updatedPost","_e$response7","_e$response7$data","unlikePost","_e$response8","_e$response8$data"],"sources":["/home/alexey/Documents/source/java/SocialNetwork/communify_frontend/src/storage/PostStore.js"],"sourcesContent":["import { makeAutoObservable, runInAction } from \"mobx\";\nimport { PostAPI } from \"../api/postApi\";\n\nexport class PostStore {\n    _feedPosts = []; // Посты для главной ленты (PostResponseDto[])\n    _userPosts = []; // Посты конкретного пользователя (PostResponseDto[])\n    _groupPosts = []; // Посты конкретной группы (PostResponseDto[])\n    _recommendedPosts = []; // Рекомендованные посты (PostResponseDto[])\n    _currentPost = null; // Текущий просматриваемый пост (PostResponseDto)\n    _loading = false;\n    _error = null;\n\n    constructor(rootStore) {\n        makeAutoObservable(this);\n        this.rootStore = rootStore; // Для userId в createPost\n        // this.fetchFeedPosts(); // Начальная загрузка\n    }\n\n    setLoading(bool) { this._loading = bool; }\n    setError(error) { this._error = error; }\n\n    // Getters\n    get feedPosts() { return this._feedPosts; }\n    get userPosts() { return this._userPosts; }\n    get groupPosts() { return this._groupPosts; }\n    get recommendedPosts() { return this._recommendedPosts; }\n    get currentPost() { return this._currentPost; }\n    get loading() { return this._loading; }\n    get error() { return this._error; }\n\n\n    async fetchFeedPosts() {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const posts = await PostAPI.getLatest();\n            runInAction(() => {\n                this._feedPosts = posts.content;\n            });\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to fetch feed posts\"));\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async fetchRecommendedPosts() {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const posts = await PostAPI.getRecommended();\n            runInAction(() => {\n                this._recommendedPosts = posts;\n            });\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to fetch recommended posts\"));\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async fetchUserPosts(userId) {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const posts = await PostAPI.getPostsByUserId(userId);\n            runInAction(() => {\n                this._userPosts = posts;\n            });\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to fetch user posts\"));\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async fetchGroupPosts(groupId) {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const posts = await PostAPI.getPostsByGroupId(groupId);\n            runInAction(() => {\n                this._groupPosts = posts;\n            });\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to fetch group posts\"));\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async createPost(postContent, imageFile, groupId = null) {\n        const userId = this.rootStore.userStore.userId;\n        if (!userId) {\n            this.setError(\"User not authenticated\");\n            return false;\n        }\n        const postData = {\n            content: postContent,\n            userId: userId,\n            groupId: groupId\n        };\n\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            const newPost = await PostAPI.createPost(postData, imageFile);\n            runInAction(() => {\n                this._feedPosts.unshift(newPost); // Добавляем в начало ленты\n                if (groupId) {\n                    this._groupPosts.unshift(newPost);\n                } else {\n                    this._userPosts.unshift(newPost); // Если это пост пользователя без группы\n                }\n            });\n            return true;\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to create post\"));\n            console.error(e);\n            return false;\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    async deletePost(postId) {\n        this.setLoading(true);\n        this.setError(null);\n        try {\n            await PostAPI.deletePost(postId);\n            runInAction(() => {\n                this._feedPosts = this._feedPosts.filter(p => p.id !== postId);\n                this._userPosts = this._userPosts.filter(p => p.id !== postId);\n                this._groupPosts = this._groupPosts.filter(p => p.id !== postId);\n                this._recommendedPosts = this._recommendedPosts.filter(p => p.id !== postId);\n            });\n        } catch (e) {\n            runInAction(() => this.setError(e.response?.data?.message || \"Failed to delete post\"));\n            console.error(e);\n        } finally {\n            runInAction(() => this.setLoading(false));\n        }\n    }\n\n    _updatePostLike(postId, updatedPostData) {\n        const update = (postsArray) => postsArray.map(p => p.id === postId ? {...p, ...updatedPostData} : p);\n        this._feedPosts = update(this._feedPosts);\n        this._userPosts = update(this._userPosts);\n        this._groupPosts = update(this._groupPosts);\n        this._recommendedPosts = update(this._recommendedPosts);\n        if (this._currentPost?.id === postId) {\n            this._currentPost = {...this._currentPost, ...updatedPostData};\n        }\n    }\n\n    async likePost(postId) {\n        // Оптимистичное обновление\n        const originalPosts = { feed: [...this._feedPosts], user: [...this._userPosts], group: [...this._groupPosts], rec: [...this._recommendedPosts] };\n        const postToUpdate = this._feedPosts.find(p => p.id === postId) || this._userPosts.find(p => p.id === postId) || this._groupPosts.find(p => p.id === postId) || this._recommendedPosts.find(p => p.id === postId);\n\n        if (postToUpdate) {\n            runInAction(() => {\n                this._updatePostLike(postId, {\n                    likeCount: postToUpdate.likeCount + 1,\n                    likedByCurrentUser: true\n                });\n            });\n        }\n\n        try {\n            const updatedPost = await PostAPI.likePost(postId); // API должен вернуть обновленный пост\n            runInAction(() => {\n                this._updatePostLike(postId, updatedPost);\n            });\n        } catch (e) {\n            runInAction(() => { // Откат в случае ошибки\n                this.setError(e.response?.data?.message || \"Failed to like post\");\n                this._feedPosts = originalPosts.feed;\n                this._userPosts = originalPosts.user;\n                this._groupPosts = originalPosts.group;\n                this._recommendedPosts = originalPosts.rec;\n                // Восстановить _currentPost если нужно\n            });\n            console.error(e);\n        }\n    }\n\n    async unlikePost(postId) {\n        const originalPosts = { feed: [...this._feedPosts], user: [...this._userPosts], group: [...this._groupPosts], rec: [...this._recommendedPosts] };\n        const postToUpdate = this._feedPosts.find(p => p.id === postId) || this._userPosts.find(p => p.id === postId) || this._groupPosts.find(p => p.id === postId) || this._recommendedPosts.find(p => p.id === postId);\n\n        if (postToUpdate) {\n             runInAction(() => {\n                this._updatePostLike(postId, {\n                    likeCount: postToUpdate.likeCount - 1,\n                    likedByCurrentUser: false\n                });\n            });\n        }\n        try {\n            const updatedPost = await PostAPI.unlikePost(postId);\n            runInAction(() => {\n                this._updatePostLike(postId, updatedPost);\n            });\n        } catch (e) {\n            runInAction(() => { // Откат\n                this.setError(e.response?.data?.message || \"Failed to unlike post\");\n                this._feedPosts = originalPosts.feed;\n                this._userPosts = originalPosts.user;\n                this._groupPosts = originalPosts.group;\n                this._recommendedPosts = originalPosts.rec;\n            });\n            console.error(e);\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}