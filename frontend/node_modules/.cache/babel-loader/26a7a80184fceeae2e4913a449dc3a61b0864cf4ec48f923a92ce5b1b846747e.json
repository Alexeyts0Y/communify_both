{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nimport { jwtDecode } from \"jwt-decode\";\nexport class UserStorage {\n  constructor() {\n    this._isAuth = true;\n    this._user = {};\n    this._currentProfile = null;\n    this._searchResults = [];\n    this._token = null; // Добавляем хранение токена\n\n    makeAutoObservable(this);\n  }\n\n  // Setters\n  setIsAuth(bool) {\n    this._isAuth = bool;\n  }\n  setUser(user) {\n    this._user = user;\n  }\n  setToken(token) {\n    this._token = token;\n    if (token) {\n      this.setIsAuth(true);\n      // Декодируем токен и сохраняем данные пользователя\n      const decoded = jwtDecode(token);\n      this.setUser({\n        id: decoded.id,\n        // В зависимости от того, как настроен ваш бекенд\n        email: decoded.email,\n        // другие поля из токена\n        ...decoded\n      });\n    } else {\n      this.setIsAuth(false);\n      this.setUser({});\n    }\n  }\n  setCurrentProfile(user) {\n    this._currentProfile = user;\n  }\n  setSearchResults(users) {\n    this._searchResults = users;\n  }\n\n  // Getters\n  get isAuth() {\n    return this._isAuth;\n  }\n  get user() {\n    return this._user;\n  }\n  get userId() {\n    var _this$_user;\n    return ((_this$_user = this._user) === null || _this$_user === void 0 ? void 0 : _this$_user.id) || null;\n  }\n  get currentProfile() {\n    return this._currentProfile;\n  }\n  get searchResults() {\n    return this._searchResults;\n  }\n  get token() {\n    return this._token;\n  }\n\n  // Метод для выхода\n  logout() {\n    this.setToken(null);\n    localStorage.removeItem('token'); // Если храните токен в localStorage\n  }\n}","map":{"version":3,"names":["makeAutoObservable","jwtDecode","UserStorage","constructor","_isAuth","_user","_currentProfile","_searchResults","_token","setIsAuth","bool","setUser","user","setToken","token","decoded","id","email","setCurrentProfile","setSearchResults","users","isAuth","userId","_this$_user","currentProfile","searchResults","logout","localStorage","removeItem"],"sources":["/home/alexey/Documents/source/java/SocialNetwork/communify_frontend/src/storage/UserStorage.js"],"sourcesContent":["import { makeAutoObservable } from \"mobx\";\nimport { jwtDecode } from \"jwt-decode\";\n\nexport class UserStorage {\n    constructor() {\n        this._isAuth = true;\n        this._user = {};\n        this._currentProfile = null;\n        this._searchResults = [];\n        this._token = null; // Добавляем хранение токена\n        \n        makeAutoObservable(this);\n    }\n\n    // Setters\n    setIsAuth(bool) {\n        this._isAuth = bool;\n    }\n\n    setUser(user) {\n        this._user = user;\n    }\n\n    setToken(token) {\n        this._token = token;\n        if (token) {\n            this.setIsAuth(true);\n            // Декодируем токен и сохраняем данные пользователя\n            const decoded = jwtDecode(token);\n            this.setUser({\n                id: decoded.id, // В зависимости от того, как настроен ваш бекенд\n                email: decoded.email,\n                // другие поля из токена\n                ...decoded\n            });\n        } else {\n            this.setIsAuth(false);\n            this.setUser({});\n        }\n    }\n\n    setCurrentProfile(user) {\n        this._currentProfile = user;\n    }\n\n    setSearchResults(users) {\n        this._searchResults = users;\n    }\n\n    // Getters\n    get isAuth() {\n        return this._isAuth;\n    }\n\n    get user() {\n        return this._user;\n    }\n\n    get userId() {\n        return this._user?.id || null;\n    }\n\n    get currentProfile() {\n        return this._currentProfile;\n    }\n\n    get searchResults() {\n        return this._searchResults;\n    }\n\n    get token() {\n        return this._token;\n    }\n\n    // Метод для выхода\n    logout() {\n        this.setToken(null);\n        localStorage.removeItem('token'); // Если храните токен в localStorage\n    }\n}"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,MAAM;AACzC,SAASC,SAAS,QAAQ,YAAY;AAEtC,OAAO,MAAMC,WAAW,CAAC;EACrBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;IACf,IAAI,CAACC,eAAe,GAAG,IAAI;IAC3B,IAAI,CAACC,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,MAAM,GAAG,IAAI,CAAC,CAAC;;IAEpBR,kBAAkB,CAAC,IAAI,CAAC;EAC5B;;EAEA;EACAS,SAASA,CAACC,IAAI,EAAE;IACZ,IAAI,CAACN,OAAO,GAAGM,IAAI;EACvB;EAEAC,OAAOA,CAACC,IAAI,EAAE;IACV,IAAI,CAACP,KAAK,GAAGO,IAAI;EACrB;EAEAC,QAAQA,CAACC,KAAK,EAAE;IACZ,IAAI,CAACN,MAAM,GAAGM,KAAK;IACnB,IAAIA,KAAK,EAAE;MACP,IAAI,CAACL,SAAS,CAAC,IAAI,CAAC;MACpB;MACA,MAAMM,OAAO,GAAGd,SAAS,CAACa,KAAK,CAAC;MAChC,IAAI,CAACH,OAAO,CAAC;QACTK,EAAE,EAAED,OAAO,CAACC,EAAE;QAAE;QAChBC,KAAK,EAAEF,OAAO,CAACE,KAAK;QACpB;QACA,GAAGF;MACP,CAAC,CAAC;IACN,CAAC,MAAM;MACH,IAAI,CAACN,SAAS,CAAC,KAAK,CAAC;MACrB,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC;IACpB;EACJ;EAEAO,iBAAiBA,CAACN,IAAI,EAAE;IACpB,IAAI,CAACN,eAAe,GAAGM,IAAI;EAC/B;EAEAO,gBAAgBA,CAACC,KAAK,EAAE;IACpB,IAAI,CAACb,cAAc,GAAGa,KAAK;EAC/B;;EAEA;EACA,IAAIC,MAAMA,CAAA,EAAG;IACT,OAAO,IAAI,CAACjB,OAAO;EACvB;EAEA,IAAIQ,IAAIA,CAAA,EAAG;IACP,OAAO,IAAI,CAACP,KAAK;EACrB;EAEA,IAAIiB,MAAMA,CAAA,EAAG;IAAA,IAAAC,WAAA;IACT,OAAO,EAAAA,WAAA,OAAI,CAAClB,KAAK,cAAAkB,WAAA,uBAAVA,WAAA,CAAYP,EAAE,KAAI,IAAI;EACjC;EAEA,IAAIQ,cAAcA,CAAA,EAAG;IACjB,OAAO,IAAI,CAAClB,eAAe;EAC/B;EAEA,IAAImB,aAAaA,CAAA,EAAG;IAChB,OAAO,IAAI,CAAClB,cAAc;EAC9B;EAEA,IAAIO,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAACN,MAAM;EACtB;;EAEA;EACAkB,MAAMA,CAAA,EAAG;IACL,IAAI,CAACb,QAAQ,CAAC,IAAI,CAAC;IACnBc,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;EACtC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}