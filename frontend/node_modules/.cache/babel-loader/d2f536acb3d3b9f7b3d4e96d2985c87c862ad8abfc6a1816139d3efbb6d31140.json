{"ast":null,"code":"import $api from \"../http\";\nexport const FriendsAPI = {\n  // Получить друзей конкретного пользователя (включая текущего, если userId = 'me')\n  getFriends: async userId => {\n    // userId может быть 'me' или ID другого пользователя\n    const response = await $api.get(`/users/${userId}/friends`);\n    return response.data; // List<UserMinimalResponseDto> или List<FriendResponseDto> (нужно уточнить)\n    // Судя по FriendItem, ожидается UserMinimalResponseDto с доп. полями типа mutualFriendsCount\n    // Если API возвращает FriendResponseDto, нужно будет извлекать friend.user или friend.friend\n  },\n  removeFriend: async (currentUserId, friendId) => {\n    // Предполагается, что currentUserId нужен для запроса, если не 'me'\n    // Если API всегда удаляет друга ТЕКУЩЕГО пользователя:\n    const response = await $api.delete(`/users/me/friends/delete/${friendId}`);\n    // Если API требует ID пользователя, чьего друга удаляем:\n    // const response = await $api.delete(`/users/${currentUserId}/friends/delete/${friendId}`);\n    return response.data; // или void\n  },\n  getRecommended: async () => {\n    const response = await $api.get(`/users/me/possible_friends`);\n    return response.data;\n  },\n  sendRequest: async recipientUserId => {\n    // Отправить запрос пользователю с ID recipientUserId\n    const response = await $api.post(`/users/${recipientUserId}/send_friend_request`);\n    return response.data; // FriendResponseDto или UserMinimalResponseDto\n  },\n  getSentRequests: async () => {\n    // Запросы, отправленные текущим пользователем\n    const response = await $api.get(`/users/me/requests/sent`);\n    return response.data; // List<FriendResponseDto> - где user это 'me', а friend это получатель\n  },\n  getReceivedRequests: async () => {\n    // Запросы, полученные текущим пользователем\n    const response = await $api.get(`/users/me/requests/recieved`); // Опечатка: recieved -> received\n    return response.data; // List<FriendResponseDto> - где friend это 'me', а user это отправитель\n  },\n  // requestId - это ID записи Friend в статусе PENDING\n  acceptRequest: async requestId => {\n    const response = await $api.patch(`/users/me/requests/${requestId}/accept`);\n    return response.data; // FriendResponseDto (обновленный)\n  },\n  rejectRequest: async requestId => {\n    // Также может использоваться для отмены отправленного запроса\n    const response = await $api.patch(`/users/me/requests/${requestId}/reject`);\n    return response.data; // FriendResponseDto (обновленный) или void\n  },\n  // Если нужен отдельный эндпоинт для отмены отправленного запроса:\n  cancelSentRequest: async requestId => {\n    const response = await $api.delete(`/users/me/requests/sent/${requestId}/cancel`); // Пример эндпоинта\n    return response.data;\n  }\n};","map":{"version":3,"names":["$api","FriendsAPI","getFriends","userId","response","get","data","removeFriend","currentUserId","friendId","delete","getRecommended","sendRequest","recipientUserId","post","getSentRequests","getReceivedRequests","acceptRequest","requestId","patch","rejectRequest","cancelSentRequest"],"sources":["/home/alexey/Documents/source/java/SocialNetwork/communify_frontend/src/api/friendApi.js"],"sourcesContent":["import $api from \"../http\";\n\nexport const FriendsAPI = {\n    // Получить друзей конкретного пользователя (включая текущего, если userId = 'me')\n    getFriends: async (userId) => { // userId может быть 'me' или ID другого пользователя\n        const response = await $api.get(`/users/${userId}/friends`);\n        return response.data; // List<UserMinimalResponseDto> или List<FriendResponseDto> (нужно уточнить)\n                              // Судя по FriendItem, ожидается UserMinimalResponseDto с доп. полями типа mutualFriendsCount\n                              // Если API возвращает FriendResponseDto, нужно будет извлекать friend.user или friend.friend\n    },\n\n    removeFriend: async (currentUserId, friendId) => { // Предполагается, что currentUserId нужен для запроса, если не 'me'\n        // Если API всегда удаляет друга ТЕКУЩЕГО пользователя:\n        const response = await $api.delete(`/users/me/friends/delete/${friendId}`);\n        // Если API требует ID пользователя, чьего друга удаляем:\n        // const response = await $api.delete(`/users/${currentUserId}/friends/delete/${friendId}`);\n        return response.data; // или void\n    },\n\n    getRecommended: async () => {\n        const response = await $api.get(`/users/me/possible_friends`);\n        return response.data;\n    },\n\n    sendRequest: async (recipientUserId) => { // Отправить запрос пользователю с ID recipientUserId\n        const response = await $api.post(`/users/${recipientUserId}/send_friend_request`);\n        return response.data; // FriendResponseDto или UserMinimalResponseDto\n    },\n\n    getSentRequests: async () => { // Запросы, отправленные текущим пользователем\n        const response = await $api.get(`/users/me/requests/sent`);\n        return response.data; // List<FriendResponseDto> - где user это 'me', а friend это получатель\n    },\n\n    getReceivedRequests: async () => { // Запросы, полученные текущим пользователем\n        const response = await $api.get(`/users/me/requests/recieved`); // Опечатка: recieved -> received\n        return response.data; // List<FriendResponseDto> - где friend это 'me', а user это отправитель\n    },\n\n    // requestId - это ID записи Friend в статусе PENDING\n    acceptRequest: async (requestId) => {\n        const response = await $api.patch(`/users/me/requests/${requestId}/accept`);\n        return response.data; // FriendResponseDto (обновленный)\n    },\n\n    rejectRequest: async (requestId) => { // Также может использоваться для отмены отправленного запроса\n        const response = await $api.patch(`/users/me/requests/${requestId}/reject`);\n        return response.data; // FriendResponseDto (обновленный) или void\n    },\n\n    // Если нужен отдельный эндпоинт для отмены отправленного запроса:\n    cancelSentRequest: async (requestId) => {\n         const response = await $api.delete(`/users/me/requests/sent/${requestId}/cancel`); // Пример эндпоинта\n         return response.data;\n    }\n};"],"mappings":"AAAA,OAAOA,IAAI,MAAM,SAAS;AAE1B,OAAO,MAAMC,UAAU,GAAG;EACtB;EACAC,UAAU,EAAE,MAAOC,MAAM,IAAK;IAAE;IAC5B,MAAMC,QAAQ,GAAG,MAAMJ,IAAI,CAACK,GAAG,CAAC,UAAUF,MAAM,UAAU,CAAC;IAC3D,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;IACA;IACA;EAC1B,CAAC;EAEDC,YAAY,EAAE,MAAAA,CAAOC,aAAa,EAAEC,QAAQ,KAAK;IAAE;IAC/C;IACA,MAAML,QAAQ,GAAG,MAAMJ,IAAI,CAACU,MAAM,CAAC,4BAA4BD,QAAQ,EAAE,CAAC;IAC1E;IACA;IACA,OAAOL,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDK,cAAc,EAAE,MAAAA,CAAA,KAAY;IACxB,MAAMP,QAAQ,GAAG,MAAMJ,IAAI,CAACK,GAAG,CAAC,4BAA4B,CAAC;IAC7D,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC;EAEDM,WAAW,EAAE,MAAOC,eAAe,IAAK;IAAE;IACtC,MAAMT,QAAQ,GAAG,MAAMJ,IAAI,CAACc,IAAI,CAAC,UAAUD,eAAe,sBAAsB,CAAC;IACjF,OAAOT,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDS,eAAe,EAAE,MAAAA,CAAA,KAAY;IAAE;IAC3B,MAAMX,QAAQ,GAAG,MAAMJ,IAAI,CAACK,GAAG,CAAC,yBAAyB,CAAC;IAC1D,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDU,mBAAmB,EAAE,MAAAA,CAAA,KAAY;IAAE;IAC/B,MAAMZ,QAAQ,GAAG,MAAMJ,IAAI,CAACK,GAAG,CAAC,6BAA6B,CAAC,CAAC,CAAC;IAChE,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAED;EACAW,aAAa,EAAE,MAAOC,SAAS,IAAK;IAChC,MAAMd,QAAQ,GAAG,MAAMJ,IAAI,CAACmB,KAAK,CAAC,sBAAsBD,SAAS,SAAS,CAAC;IAC3E,OAAOd,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDc,aAAa,EAAE,MAAOF,SAAS,IAAK;IAAE;IAClC,MAAMd,QAAQ,GAAG,MAAMJ,IAAI,CAACmB,KAAK,CAAC,sBAAsBD,SAAS,SAAS,CAAC;IAC3E,OAAOd,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAED;EACAe,iBAAiB,EAAE,MAAOH,SAAS,IAAK;IACnC,MAAMd,QAAQ,GAAG,MAAMJ,IAAI,CAACU,MAAM,CAAC,2BAA2BQ,SAAS,SAAS,CAAC,CAAC,CAAC;IACnF,OAAOd,QAAQ,CAACE,IAAI;EACzB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}